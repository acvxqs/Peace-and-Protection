addons\xdcc.ppa
; #= ppxdcc -rs
; ########################################
; Peace and Protection
; XDCC (standard addon)
; ########################################

#.ppa.info off
[xdcctarg]
[xdccopt_dialog:show_orig]
[phrase:status:lower:dlg]
[xdccopt_dialog:show_xdcc]
[xdccopt_dialog:show_hide]
[addon]
name=[xdcc:name:dlg]
group=[addon:core:dlg]
popup=[xdcc:name]
author=pai
version=1.00
url=https://pnp.kristshell.net/
email=pnp@login.kristshell.net
id=ppxdcc
ppver=4.22
config=xdcc edit
dialogs=xdcc xdcccfg
windows=@XDCC
timers=.xdccad
help=xdcc
[files]
1=xdcc.ppa
[notes]
1=[xdcc:info:dlg]
[query]
1=[popups_menu:xdcc]
2=.[popups_menu:xdcc_send_list_here]:xdcc list $$1
3=.[popups_menu:xdcc_send_ad_here]:xdcc ad $$1
[nicklist]
1=[popups_menu:xdcc]
2=.[popups_menu:xdcc_send_list_here]:xdcc list $$1
3=.[popups_menu:xdcc_send_ad_here]:xdcc ad $$1
[channel]
1=[popups_menu:xdcc]
2=.[popups_menu:xdcc_send_list_here]:xdcc list $chan
3=.-
4=.[popups_menu:xdcc_send_ad_here]:xdcc ad $chan
5=.$iif($timer(.xdccad) == $null,[popups_menu:xdcc_timer_ad:target=$replace($active,&,&&)]):xdcc timer $_entry(-2,15,[xdcc:ad_send]) $chan
6=.$iif($timer(.xdccad),[popups_menu:xdcc_timer_disable]):xdcc timer off
#.ppa.info end

on *:LOAD:{
  ; PnP check
  if (!$_ispnp) {
    echo 4 -ati2 *** This addon requires Peace and Protection by pai to use.
    echo 4 -ati2 *** You can download Peace and Protection at https://pnp.kristshell.net/
    .timer -mio 1 0 .unload -rs " $+ $script $+ "
    halt
  }
  ; Invalid load method check
  if (!$istok($_cfgx(addons,ids),$readini($script,n,addon,id),32)) {
    .timer -mio 1 0 .unload -rs " $+ $script $+ "
    dispa [startup:addon_file_improper:file=$script]
    halt
  }
}

;;; second version- multiple pack sets, copy/move between, select for diff groups of users, passwords
;;; second version- allow LIST N to get file list of one pack
;;; /xdcc add/del/etc?
;;; saving/loading/deleting of 'presets'? more presets?
;;; allow !cmds bound to individual packets?

; Section one- Pack editing
dialog xdcc {
  title "[xdcc_dialog:title]"
  icon script\pnp.ico
  option map
  size -1 -1 267 165

  box "&[xdcc_dialog:select]...", 1, 5 4 120 128
  list 2, 12 17 106 92, extsel

  button "&[dialog:add]...", 3, 12 114 32 12
  button "&[dialog:copy]", 4, 48 114 32 12, disable
  button "&[dialog:remove]", 5, 85 114 33 12, disable

  box "... &[xdcc_dialog:then_edit]", 21, 132 4 120 128
  list 6, 138 17 106 42, extsel disable

  button "&[dialog:add]...", 7, 138 57 32 12, disable
  button "&[dialog:edit]...", 8, 175 57 32 12, disable
  button "&[dialog:remove]", 9, 212 57 33 12, disable

  text "&[xdcc_dialog:desc]:", 26, 137 84 100 9
  edit "", 10, 137 94 106 13, autohs disable

  text "[xdcc_dialog:total]:", 28, 137 116 60 9
  text "-", 29, 197 116 20 9
  button "&[dialog:reset]", 11, 217 114 26 12, disable

  edit "", 200, 1 1 1 1, hide autohs

  button "[word:done:dlg]", 100, 12 142 53 14, OK default
}
on *:DIALOG:xdcc:init:*:{
  did -o $dname 10 1 ([xdcc_dialog:none:lower])
  var %line,%pack = 1,%file = $_cfg(xdcc.dat)
  if ($exists(%file) == $false) return
  :loop
  %line = $read(%file,n,%pack)
  if ($gettok(%line,1,9)) {
    did -a $dname 2 [[ $+ %pack $+ ]] $ifmatch
    inc %pack | goto loop
  }
}
on *:DIALOG:xdcc:sclick:2:{
  _xdccsave
  if ($did(2,0).sel == 0) {
    did -b $dname 4,5,6,7,8,9,10,11
    did -r $dname 6
    did -o $dname 10 1 ([xdcc_dialog:none:lower])
    did -o $dname 29 1 -
  }
  elseif ($did(2,0).sel > 1) {
    did -b $dname 4,6,7,8,9,10
    did -e $dname 5
    did -r $dname 6
    did -o $dname 10 1 ( $+ [xdcc_dialog:count:num=$chr(36) $+ did $+ $chr(40) $+ 2 $+ $chr(44) $+ 0 $+ $chr(41) $+ .sel] $+ )
    var %line,%where = 1,%total = 0,%file = $_cfg(xdcc.dat)
    :loopc
    %line = $read(%file,n,$did(2,%where).sel)
    inc %total $gettok(%line,2,9)
    if (%where < $did(2,0).sel) { inc %where | goto loopc }
    did -o $dname 29 1 %total
    did $iif(%total,-e,-b) $dname 11
  }
  else {
    did -e $dname 4,5,6,7,10
    did -b $dname 8,9
    var %num = 3,%line = $read($_cfg(xdcc.dat),n,$did(2,1).sel)
    did -o $dname 10 1 $gettok($did(2,$did(2,1).sel),2-,32)
    did -o $dname 29 1 $gettok(%line,2,9)
    did $iif($gettok(%line,2,9),-e,-b) $dname 11
    did -r $dname 6
    :loopf
    if ($gettok(%line,%num,9)) {
      did -a $dname 6 $ifmatch
      inc %num | goto loopf
    }
  }
}
on *:DIALOG:xdcc:sclick:3:{
  _xdccsave
  did -ac $dname 2 [[ $+ $calc($did(2).lines + 1) $+ ]] ([word:none:lower])
  write $_cfg(xdcc.dat) ([word:none:lower])	0
  did -e $dname 4,5,6,7,10
  did -b $dname 8,9,11
  did -o $dname 29 1 0
  did -r $dname 6
  did -rf $dname 10
  _xdcced 1
}
on *:DIALOG:xdcc:sclick:4:{
  _xdccsave
  did -ac $dname 2 [[ $+ $calc($did(2).lines + 1) $+ ]] $did(10) ([dialog:copy:notdlg])
  did -b $dname 11
  did -o $dname 29 1 0
  did -of $dname 10 1 $did(10) ([dialog:copy:notdlg])
  did -o $dname 200 1 $did(2,1).sel
  _xdccsave
}
on *:DIALOG:xdcc:sclick:5:{
  did -r $dname 200
  var %file = $_cfg(xdcc.dat)
  :loopr
  if ($did(2,1).sel) {
    did -d $dname 2 $ifmatch
    write -dl [ $+ [ $ifmatch ] ] %file
    goto loopr
  }
  did -b $dname 4,5,6,7,8,9,10,11
  did -r $dname 6
  did -o $dname 10 1 ([xdcc_dialog:none:lower])
  did -o $dname 29 1 -
  did -f $dname 2
  var %num = $did(2).lines
  :loopn
  if (%num) {
    did -o $dname 2 %num [[ $+ %num $+ ]] $gettok($did(2,%num),2-,32)
    dec %num | goto loopn
  }
}
on *:DIALOG:xdcc:sclick:6:{
  if ($did(6,0).sel == 0) did -b $dname 8,9
  elseif ($did(6,0).sel > 1) { did -b $dname 8 | did -e $dname 9 }
  else did -e $dname 8,9
}
on *:DIALOG:xdcc:dclick:6:_xdcced $did(6,1).sel
on *:DIALOG:xdcc:sclick:7:_xdcced $calc($did(6).lines + 1)
on *:DIALOG:xdcc:sclick:8:_xdcced $did(6,1).sel
on *:DIALOG:xdcc:sclick:9:{
  did -o $dname 200 1 $did(2,1).sel
  :loop | if ($did(6,1).sel) { did -d $dname 6 $ifmatch | goto loop }
  did -f $dname 6
  did -b $dname 8,9
}
on *:DIALOG:xdcc:edit:10:did -o $dname 200 1 $did(2,1).sel | did -oc $dname 2 $did(2,1).sel $gettok($did(2,$did(2,1).sel),1,32) $did(10)
on *:DIALOG:xdcc:sclick:11:{
  if ($did(2,0).sel > 1) {
    var %line,%num = 1,%file = $_cfg(xdcc.dat)
    :loopr
    if ($did(2,%num).sel) {
      %line = $read(%file,n,$ifmatch)
      write -l $+ $ifmatch %file $puttok(%line,0,2,9)
      inc %num | goto loopr
    }
  }
  else did -o $dname 200 1 $did(2,1).sel
  did -o $dname 29 1 0
  did -b $dname 11
}
on *:DIALOG:xdcc:sclick:100:_xdccsave
alias -l _xdcced {
  var %old = $did(xdcc,6,$1)
  if (%old == $null) %old = $_dlgi(xdccpack)
  if (%old == $null) %old = $mircdir
  _ssplay Question
  var %new = $$sfile(%old,[xdcc:pack_select]:)
  _dlgw xdccpack $nofile(%new)
  did -o xdcc 200 1 $did(xdcc,2,1).sel
  if ($did(xdcc,6).lines == 0) {
    did -fo xdcc 10 1 $gettok($nopath(%new),1,46)
    did -oc xdcc 2 $did(xdcc,2,1).sel $gettok($did(xdcc,2,$did(xdcc,2,1).sel),1,32) $did(xdcc,10)
  }
  did -oc xdcc 6 $1 %new
  did -e xdcc 8,9
}
alias -l _xdccsave {
  if ($did(200) !isnum) return
  var %num = 1,%curr = $did(10)
  if (%curr == $null) %curr = ([word:none:lower])
  %curr = %curr $+ 	 $+ $did(29)
  :loop
  if ($did(6,%num)) {
    %curr = %curr $+ 	 $+ $ifmatch
    inc %num | goto loop
  }
  write -l [ $+ [ $did(200) ] ] $_cfg(xdcc.dat) %curr
  did -r $dname 200
}

; Section two- Other options
dialog xdcccfg {
  title "[xdccopt_dialog:title]"
  icon script\pnp.ico
  option map
  size -1 -1 200 192

  check "&[xdccopt_dialog:enable]:", 1, 6 6 82 9
  text "&[xdccopt_dialog:presets]:", 11, 92 7 26 9
  combo 12, 120 4 66 61, drop
  box "", 2, 6 18 187 143
  text "&[xdccopt_dialog:first_line]", 3, 13 30 167 9
  edit "", 4, 13 41 173 13, autohs
  text "&[xdccopt_dialog:packet_line]", 5, 13 57 167 9
  edit "", 6, 13 68 173 13, autohs
  text "&[xdccopt_dialog:last_line]", 7, 13 85 167 9
  edit "", 8, 13 97 173 13, autohs
  text "&[xdccopt_dialog:single_line]", 9, 13 113 167 9
  edit "", 10, 13 124 173 13, autohs
  text "&[xdccopt_dialog:show]:", 13, 13 143 80 9
  combo 14, 93 141 93 61, drop

  button "[dialog:ok]", 100, 6 170 53 14, OK default
  button "[dialog:cancel]", 101, 73 170 53 14, cancel
  button "&[dialog:help]", 102, 140 170 53 14, disable
}
on *:DIALOG:xdcccfg:init:*:{
  loadbuf -otxdcctarg $dname 14 " $+ $scriptdirxdcc.ppa"
  if ($_cfgx(xdcc,enable)) did -c $dname 1
  else did -b $dname 3,4,5,6,7,8,9,10,13,14
  did -o $dname 4 1 $_readprep($_cfgx(xdcc,ad-pre))
  did -o $dname 6 1 $_readprep($_cfgx(xdcc,ad-mid))
  if ($did(6) == $null) did -o $dname 6 1 [&num&] &desc& - &size& (&request& [public_xdcc:dls])
  did -o $dname 8 1 $_readprep($_cfgx(xdcc,ad-post))
  did -o $dname 10 1 $_readprep($_cfgx(xdcc,ad-line))
  did -c $dname 14 $findtok(* -si2 @XDCC hide,$_cfgx(xdcc,route),32)
  did -a $dname 12 [xdccopt_dialog:preset_min:notdlg]
  did -a $dname 12 [xdccopt_dialog:preset_basic:notdlg]
  did -a $dname 12 [xdccopt_dialog:preset_color:notdlg]
}
on *:DIALOG:xdcccfg:sclick:1:did $iif($did(1).state,-e,-b) $dname 3,4,5,6,7,8,9,10,13,14
on *:DIALOG:xdcccfg:edit:*:did -u $dname 12
on *:DIALOG:xdcccfg:sclick:12:{
  goto $did(12).sel
  :1
  did -r $dname 4,8
  did -o $dname 6 1 [&num&] &desc& - &size& (&request& [public_xdcc:dls])
  did -o $dname 10 1 [public_xdcc:list_min:cmd=/ctcp &me& XDCC LIST]
  return
  :2
  did -o $dname 4 1 [public_xdcc:list_top]
  did -o $dname 6 1 [&num&]: &desc& / &size& / &request& [public_xdcc:dls]
  did -o $dname 8 1 [public_xdcc:list_cmd:cmd=/ctcp &me& XDCC GET #]
  did -o $dname 10 1 [public_xdcc:list_min:cmd=/ctcp &me& XDCC LIST]
  return
  :3
  did -o $dname 4 1 [public_xdcc:list_top:total=&col1&&total&:request=&col2&&request&]
  did -o $dname 6 1 [&col1&&num&] &col2&&desc& - &size& (&request& [public_xdcc:dls])
  did -o $dname 8 1 [public_xdcc:list_cmd:cmd=&col1&/ctcp &me& XDCC GET #]
  did -o $dname 10 1 [public_xdcc:list_min:cmd=&col2&/ctcp &me& XDCC LIST:total=&col1&&total&]
  return
}
on *:DIALOG:xdcccfg:sclick:100:{
  _cfgxw xdcc enable $did(1).state
  _cfgxw xdcc ad-pre $_writeprep($did(4))
  _cfgxw xdcc ad-mid $_writeprep($did(6))
  _cfgxw xdcc ad-post $_writeprep($did(8))
  _cfgxw xdcc ad-line $_writeprep($did(10))
  _cfgxw xdcc route $gettok(* -si2 @XDCC hide,$did(14).sel,32)
}

; Section three- CTCP/msg receipt and reply
ctcp *:XDCC:*:_xdcc $2- | if ($result) { $_show.ctcp($nick,$address,$1,$2-) | halt }
on ^*:OPEN:?:XDCC *:_xdcc $2-
on ^*:TEXT:XDCC *:?:_xdcc $2-
alias -l _xdcc {
  if (!$_cfgx(xdcc,enable)) return
  if ($1 == LIST) { _xdccfloodp 7 | _sendad _qnotice $nick }
  elseif ((($1 == GET) || ($1 == SEND)) && ($2- isnum)) { _xdccfloodp 3 | _xdccsend $nick $2 }
  elseif (($1 == GET) || ($1 == SEND)) { _xdccfloodp 3 | _linedance _qnotice $nick [public_xdcc:xdcc_syntax:cmd=XDCC $upper($1)] }
  elseif ($1 == HELP) { _xdccfloodp 5 | _linedance _qnotice $nick [public_xdcc:xdcc_list] | _linedance _qnotice $nick [public_xdcc:xdcc_get] }
  elseif ($1 == CANCEL) { _xdccfloodp 3 | _cancel.dcc $nick | if ($result) _linedance _qnotice $nick [public_sound:cancel_count:num=$result] | else _linedance _qnotice $nick [public_sound:cancel_none] }
  else return 0
  ; display
  var %to = $_cfgx(xdcc,route)
  if (%to == *) return 1
  if ((%to == @XDCC) && ($window(@XDCC) == $null)) _window 1 -nzi + @XDCC -1 -1 -1 -1 @XDCC
  var %say = [xdcc:show_request:nick=$;s($nick)] $+ : $1-
  if (%to == hide) halt
  dispr %to %say
  halt
}
alias -l _xdccfloodp {
  if ($hget(pnp.flood. $+ $cid,xdcc. $+ $site) >= 9) halt
  hinc -z pnp.flood. $+ $cid xdcc. $+ $site $1
  if ($hget(pnp.flood. $+ $cid,xdcc. $+ $site) >= 9) {
    hinc -z pnp.flood. $+ $cid xdcc. $+ $site 30
    _linedance _qnotice $nick [public_xdcc:flood_ignore]
    halt
  }
}
alias -l _xdccsend {
  var %file,%valid = 0,%num = 3,%line = $read($_cfg(xdcc.dat),n,$2)
  if ($numtok(%line,9) < 3) _linedance _qnotice $1 [public_xdcc:no_packet:num=$2]
  else {
    :loop
    %file = $gettok(%line,%num,9)
    if (%file) {
      _send.dcc $1 $ifmatch
      if ($result >= 0) %valid = 1
      if ($result > 0) _linedance _qnotice $1 [public_sound:queued:file=$nopath(%file):num=$result]
      elseif ($result == -4) _linedance _qnotice $1 [public_sound:error_send:file=$nopath(%file)]
      elseif ($result == -5) _linedance _qnotice $1 [public_sound:already_queue:file=$nopath(%file)]
      elseif ($result == -6) _linedance _qnotice $1 [public_sound:already_send:file=$nopath(%file)]
      elseif ($result < 0) _linedance _qnotice $1 [public_sound:queue_full:file=$nopath(%file)]
      inc %num | goto loop
    }
    if (%valid) write -l $+ $2 $_cfg(xdcc.dat) $puttok(%line,$calc(1 + $gettok(%line,2,9)),2,9)
  }
}

; Section four- Advertising
alias -l _sendad {
  var %fname,%num,%size,%line,%where = 1,%total = 0,%file = $_cfg(xdcc.dat),%mid = $_readprep($_cfgx(xdcc,ad-mid))
  if (%mid == $null) %mid = [&num&] &desc& - &size& (&request& [public_xdcc:dls])
  :loopc
  %line = $read(%file,n,%where)
  if (%line) {
    inc %total $gettok(%line,2,9)
    inc %where | goto loopc
  }
  var %packs = $lines(%file),%where = 1
  if ($_readprep($_cfgx(xdcc,ad-pre))) _linedance $1-2 $msg.compile($ifmatch,&nick&,$2,&total&,%packs,&request&,%total)
  :loopa
  %line = $read(%file,n,%where)
  if (%line) {
    ; &desc& &size& &count& &file& &request& &num& &nick&
    ; &file& is (x files) if multiple &count& is 1 or more
    if ($numtok(%line,9) > 2) {
      %size = 0 | %num = 3
      :loopf
      if ($gettok(%line,%num,9)) { if ($exists($ifmatch)) inc %size $lof($gettok(%line,%num,9)) | inc %num | goto loopf }
      if (%num == 4) %fname = $gettok(%line,3,9)
      else %fname = ( $+ $calc($numtok(%line,9) - 2) files)
      _linedance $1-$2 $msg.compile(%mid,&nick&,$2,&total&,%packs,&request&,$gettok(%line,2,9),&desc&,$gettok(%line,1,9),&file&,%fname,&size&,$_size(%size),&num&,%where)
    }
    inc %where | goto loopa
  }
  if ($_readprep($_cfgx(xdcc,ad-post))) _linedance $1-$2 $msg.compile($ifmatch,&nick&,$2,&total&,%packs,&request&,%total)
}

alias -l _shortad {
  var %line,%where = 1,%total = 0,%file = $_cfg(xdcc.dat)
  var %ad = $_readprep($_cfgx(xdcc,ad-line))
  if (%ad == $null) %ad = [public_xdcc:list_min:cmd=XDCC LIST]
  :loopc
  %line = $read(%file,n,%where)
  if (%line) {
    inc %total $gettok(%line,2,9)
    inc %where | goto loopc
  }
  var %packs = $lines(%file)
  return $msg.compile(%ad,&nick&,$1,&total&,%packs,&request&,%total)
}

; Section five- popups and /xdcc
alias -l _validact if (($chr(32) !isin $active) && (@* !iswm $active)) return $1-
menu menubar {
  $_popssep
  [popups_menu:xdcc]
  .$iif($_cfgx(xdcc,enable),$style(1)) [popups_menu:xdcc_enable]:xdcc on
  .$iif(!$_cfgx(xdcc,enable),$style(1)) [popups_menu:xdcc_disable]:xdcc off
  .-
  .$_validact([popups_menu:xdcc_send_list:target=$replace($active,&,&&)]):xdcc list $active
  .$_validact([popups_menu:xdcc_send_ad:target=$replace($active,&,&&)]):xdcc ad $active
  .-
  .$_validact($iif($timer(.xdccad) == $null,[popups_menu:xdcc_timer_ad:target=$replace($active,&,&&)])):xdcc timer $_entry(-2,15,[xdcc:ad_send]) $active
  .$_validact($iif($timer(.xdccad) == $null,[popups_menu:xdcc_timer_all])):xdcc timer $_entry(-2,15,[xdcc:ad_send]) all
  .$iif($timer(.xdccad),[popups_menu:xdcc_timer_disable]):xdcc timer off
  .-
  .$iif($window(@DCCQueue).state == hidden,[popups_menu:xdcc_queue]):window -aw @DCCQueue
  .-
  .[popups_menu:xdcc_packs]...:xdcc edit
  .[popups_menu:xdcc_opt]...:xdcc cfg
  .[popups_menu:xdcc_queue_opt]...:dcc queue
}
alias xdcc {
  if (($1 == on) || ($1 == [word:on:lower])) {
    dispa [xdcc:on]
    _cfgxw xdcc enable 1
  }
  elseif (($1 == off) || ($1 == [word:off:lower])) {
    dispa [xdcc:off]
    _cfgxw xdcc enable 0
  }
  elseif ($1 == list) {
    if ($2) var %targ = $2
    else var %targ = $active
    if (($chr(32) isin %targ) || (@* iswm %targ)) _error [error:xdcc_window]
    if (%targ == all) _sendad amsg *
    else _sendad msg %targ
  }
  elseif ($1 == ad) {
    if ($2) var %targ = $2
    else var %targ = $active
    if (($chr(32) isin %targ) || (@* iswm %targ)) _error [error:xdcc_window]
    if (%targ == all) amsg $_shortad(*)
    else msg %targ $_shortad(%targ)
  }
  elseif ($1 == timer) {
    if ($2 !isnum) {
      .timer.xdccad off
      dispa [xdcc:ad_off]
    }
    else {
      if ($3) var %targ = $3
      else var %targ = $active
      if (($chr(32) isin %targ) || (@* iswm %targ)) _error [error:xdcc_window]
      .timer.xdccad 0 $calc($2 * 60) xdcc ad %targ
      dispa [xdcc:ad_on:target=$;t(%targ):num=$;s($2):cmd=$;s(/xdcc timer off)]
    }
  }
  elseif ($1 == cfg) _dialog -am xdcccfg xdcccfg
  elseif ($1 == edit) _dialog -am xdcc xdcc
  else {
    dispa [xdcc:help1:cmd=$;s(/xdcc edit)]
    dispa [xdcc:help2:cmd=$;s(/xdcc cfg)]
    var %cmd = /xdcc [word:on:lower]|[word:off:lower]
    dispa [xdcc:help3:cmd=$;s(%cmd)]
    var %cmd = /xdcc list [[word:nickname:lower]|#[word:channel:lower]]
    dispa [xdcc:help4:cmd=$;s(%cmd)]
    var %cmd = /xdcc ad [[word:nickname:lower]|#[word:channel:lower]]
    dispa [xdcc:help5:cmd=$;s(%cmd)]
    var %cmd = /xdcc timer n|[word:off:lower] [#[word:channel:lower]|[word:nickname:lower]|[word:all:lower]]
    dispa [xdcc:help6:cmd=$;s(%cmd)]
  }
}

