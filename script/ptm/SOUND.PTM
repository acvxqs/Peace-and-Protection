addons\sound.ppa
; #= ppsound -rs
; ########################################
; Peace and Protection
; Sound (standard addon)
; ########################################

#.ppa.info off
[addon]
name=[sound:name:dlg]
group=[addon:core:dlg]
popup=[sound:name]
author=pai
version=1.05
url=https://pnp.kristshell.net/
email=pnp@login.kristshell.net
id=ppsound
ppver=4.22
config=scfg
timers=.squeue
windows=@Playlist* @Queue @SoundGrab*
dialogs=randsound starg stype* scfg sopt deftypes
hashpnp=sound.cont pqa.soundtarg grab.focus
hashcid=lastsound leechcmds
[files]
1=sound.ppa
[other]
1=reindex.ini
[notes]
1=[sound:info1:dlg]
2=[sound:info2:dlg]
[menu]
1=[popups_menu:s_opt]...:sopt
[interfaces]
#.ppa.info end

; /loc [-switches] type [soundfile|stop [window[,cid]|- [action|-]]]
; switches specify list or play random, etc.
; soundfile may include an extension (else type is used to get extension(s))
; soundfile may include a directory, wildcards, spaces, quotes
; if soundfile is just a directory or missing, you pick a file
; wildcards finds indexed matches; wilds with directory finds nonindexed matches
; exact filename only matches exact file (although dirs are searched)
; window defaults to TARGET
; action defaults to DEFAULT
; type must be specified (mp, not mp2/mp3, for example)
; type may be * if -s for playlist, or to use current type
; finds and plays to window (unless error or playlisting)
; mostly used internally
; adds all matches to queue if open

; Switches-
; -l = Always list
; -r = Always random
; -a[n] = Add to list [number]
; -p = Playlist all matches
; -c = Confirm random selections
; -s = Searching for a playlist (with l to edit list)
; (by default, lists if >1, plays if =1)

alias loc {
  ; Sort parameters
  if (-* iswm $1) { var %num,%opt = $1,%type = $2,%file = $3- }
  else { var %num,%opt = -,%type = $1,%file = $2- }
  if ("* iswm %file) { var %action = $gettok(%file,2-,34) | %file = $gettok(%file,1,34) }
  else { var %action = $gettok(%file,2-,32) | %file = $gettok(%file,1,32) }
  var %window = $gettok(%action,1,32)
  %action = $gettok(%action,2-,32)
  if (%action == $null) %action = -
  if ((%window == $null) || (%window == -)) {
    _validst -a
    %window = $hget(pnp.config,soundtarg)
  }

  if (s isin %opt) %type = *
  else {
    if (%type == *) %type = $hget(pnp.config,soundtype)
    if (%type == $null) {
      _validstp
      %type = $hget(pnp.config,soundtype)
    }
    if ($_scfg(%type,ext) == $null) _error [error:sound_type:type=%type]
  }

  ; Stop?
  if (%file == stop) {
    if (/* iswm $_scfg(%type,player)) $_scfg(%type,player) stop
    else {
      if ($istok($_scfg(%type,ext),%type,32)) %file = $_temp(%type)
      else %file = $_temp($gettok($_scfg(%type,ext),1,32))
      write -c %file | _plsound %type %file
    }
    .timer.squeue off
    return
  }

  ; Playlists?
  if (s isin %opt) var %kind = list
  else var %kind = file

  ; Find or select file
  if ($nopath(%file)) {
    if ((* !isin %file) && (. !isin %file) && (\ !isin %file)) %file = * $+ %file $+ *
    if (. !isin %file) %file = %file $+ . $+ $_glurp($iif(%kind == list,$_splext,$_scfg(%type,ext)))
    if (\ isin %file) %file = $_truename.fn(%file)
    if (%kind == list) {
      %num = $findfile($nofile(%file),$nopath(%file),0)
      if (%num == 0) { var %etype = [sound:playlist:lower] | _error [error:file_match:type=%etype:file=%file] }
      %file = $findfile($nofile(%file),$nopath(%file),$_pprand(%num))
    }
    else {
      %num = $_sfind(%type,1,%file)
      if (%num == 0) {
        window -c @.soundfind
        _error [error:file_match:type=$_desc(%type):file=%file]
      }
    }
  }
  else {
    if (%file == $null) {
      %file = $iif(%kind == list,$_scfg(opt,lastpdir),$_scfg(%type,lastdir))
      if (%file == $null) %file = $_scfg(%type,dir1)
    }
    if (*\ !iswm %file) %file = %file $+ \
    if (. !isin %file) %file = %file $+ *. $+ $_glurp($iif(%kind == list,$_splext,$_scfg(%type,ext)))
    if (%kind == list) var %kshow = playlist | else var %kshow = $_desc(%type) file
    _ssplay Question
    %file = $$sfile(%file,[sound:play_prompt:type=%kshow])
    writeini $_cfg(sound.ini) $iif(%kind == list,opt,%type) $iif(%kind == list,lastpdir,lastdir) $nofile(%file)
    ; grab any description and store in window
    if (%kind == file) %num = $_sfind(%type,1,%file)
  }

  ; Special actions- queue?
  if (($window(@queue)) && (c !isin %opt) && (r !isin %opt) && (a !isin %opt) && (l !isin %opt)) {
    if (%kind == list) {
      window -hl @.soundfind
      loadbuf @.soundfind " $+ %file $+ "
      %kind = 1
    }
    else %kind = 2
    %num = 1
    :loopq
    if ($line(@.soundfind,%num)) { squeue $gettok($ifmatch,%kind,9) | inc %num | goto loopq }
    window -c @.soundfind
    squeue start
    return
  }

  ; List in window?
  if ((l isin %opt) || (a isin %opt) || ((%num > 1) && (r !isin %opt) && (c !isin %opt) && (p !isin %opt))) {
    if (a isin %opt) {
      %window = @Playlist $+ $calc($right(%opt,$calc(- $pos(%opt,a,1))))
      if (%window == @Playlist0) %window = @Playlist
    }
    else %window = @Playlist
    if ($window(%window) == $null) { _window 2.4 -lz + %window $_winpos(8,12,10,10) @Playlist | _plban %window }
    elseif (a !isin %opt) { clear %window | _plban %window }
    if (%kind == list) {
      loadbuf %window " $+ %file $+ "
      titlebar %window (x files) %file
    }
    else {
      %num = 1
      :loopp
      if ($line(@.soundfind,%num)) { aline %window $gettok($ifmatch,2,9) | inc %num | goto loopp }
      window -c @.soundfind
    }
    _plupdt %window
    window -a %window
    return
  }

  if (%kind == list) {
    window -c @.soundfind
    _plplpl %file
    return
  }

  ; Playlist?
  if (p isin %opt) {
    %file = $_temp($gettok($_splext,1,32))
    %num = 1
    window -ln @.soundfind2
    :looppp
    if ($line(@.soundfind,%num)) { aline @.soundfind2 $gettok($ifmatch,2,9) | inc %num | goto looppp }
    savebuf @.soundfind2 %file
    close -@ @.soundfind @.soundfind2
    _plplpl $mircdir $+ %file
    return
  }

  ; Else, random pick
  %num = $line(@.soundfind,0)
  :retry
  %file = $line(@.soundfind,$_pprand(%num))
  if ($_pprand($calc(2 + $gettok($gettok(%file,1,9),1,3))) > 2) goto retry
  window -c @.soundfind

  ; Confirm random pick?
  if ((c isin %opt) && (%num > 1)) {
    _dialog -am randsound randsound
    did -ra randsound 2 $replace($nopath($gettok(%file,2,9)),&,&&)
    did -o randsound 10 1 %file
    did -o randsound 11 1 $1-
    did -o randsound 12 1 %window
    did -o randsound 13 1 %action
    did -o randsound 14 1 %type
    did -o randsound 15 1 $cid
    halt
  }

  ; sound / desc selected- now play
  if ($window(@queue)) { squeue $gettok(%file,2,9) | squeue start }
  else return $_sound($gettok(%file,2,9),%file,%window,%action,%type,$iif(%num > 1,[public_sound:random],[public_sound:plays]))
}
alias -l _plban {
  aline $1 [sound:list_instruction1]
  aline -s $1 [sound:list_instruction2]
  aline $1  
}

; Random pick dialog
dialog randsound {
  title "[randsnd_dialog:title]"
  icon script\pnp.ico
  option dbu
  size -1 -1 200 34
  text "[randsnd_dialog:head]:", 1, 2 1 197 7
  text "", 2, 4 10 197 7
  button "&[spanel_dialog:play]", 3, 6 20 40 12, OK default
  button "[dialog:cancel]", 4, 56 20 40 12, cancel
  button "&[randsnd_dialog:pick]", 5, 106 20 40 12
  check "&[randsnd_dialog:continuous]", 20, 156 21 50 11
  edit "", 10, 1 1 1 1, hide result
  edit "", 11, 1 1 1 1, hide
  edit "", 12, 1 1 1 1, hide
  edit "", 13, 1 1 1 1, hide
  edit "", 14, 1 1 1 1, hide
  edit "", 15, 1 1 1 1, hide
}
on *:DIALOG:randsound:init:*:if ($hget(pnp,sound.cont)) did -c $dname 20
on *:DIALOG:randsound:sclick:3:{
  if ($scid($did(15))) scid $did(15)
  if ($_scfg($did(14),index)) {
    ; modify rating of this song
    var %file = $did(14) $+ _indx.dat
    %file = $_cfg(%file)
    var %get = * $+ $did(10) $+ *
    var %line = $read(%file,nw,%get)
    %line = $puttok(%line,0 ,1,9)
    if ($count(%line,	) < 2) %line = %line $+ 	
    write -l $+ $calc($readn + 1) %file %line
  }
  if (($did(20).state) && (!$hget(pnp,sound.cont))) scont on | elseif ($did(20).state == 0) .scont off
  if ($window(@queue)) { squeue $gettok($did(10),2,9) | squeue start }
  else return $_sound($gettok($did(10),2,9),$did(10),$did(12),$did(13),$did(14),[public_sound:random])
}
on *:DIALOG:randsound:sclick:5:{
  if ($scid($did(15))) scid $did(15)
  if ($_scfg($did(14),index)) {
    ; modify rating of old one
    var %file = $did(14) $+ _indx.dat
    %file = $_cfg(%file)
    var %get = * $+ $did(10) $+ *
    var %line = $read(%file,nw,%get)
    var %new =  $+ $calc($gettok($gettok(%line,1,9),1,3) + 1) 
    %line = $puttok(%line,%new,1,9)
    if ($count(%line,	) < 2) %line = %line $+ 	
    write -l $+ $calc($readn + 1) %file %line
  }
  loc $did(11)
}

; Drag/drop support
on &*:SIGNAL:PNP.DRAGDROP:{
  if (($1 == n) && ($_sext($3-))) {
    sound $2 " $+ $3- $+ " -
    halt
  }
}

; /sound [window[,cid]] soundfile [action]
; soundfile must include an extension (defaults to wav otherwise)
; soundfile may include a directory
; soundfile may include wildcards, spaces if quoted
; window defaults to CURRENT; can be -s (status) -c (all chan) -q (quiet) -a (active)
; action defaults to NONE; use - for a 'default' action
; plays to window (unless error)

alias -l _tsound {
  _validst -a
  sound $hget(pnp.config,soundtarg) $1-
}
alias sound {
  if (($1 == $null) || ($1 == on) || ($1 == off) || ($1 == [word:on:lower]) || ($1 == [word:off:lower])) { sound $iif($1 == [word:off],off,$iif($1 == [word:on],on,$1)) | saveini | hdel pnp opt.n3 | return }

  ; Sort parameters (switch to cid for isopen check)
  if ((, isin $1) && ($gettok($1,2,44) isnum) && ($scid($ifmatch))) scid $ifmatch
  if (($_isopen($gettok($1,1,44))) || (-? iswm $1)) { var %window = $1,%file = $2- }
  else { var %window = -a,%file = $1- }
  scid -r
  if ("* iswm %file) { var %action = $gettok($gettok(%file,2-,34),1-,32) | %file = $gettok(%file,1,34) }
  else { var %action = $gettok(%file,2-,32) | %file = $gettok(%file,1,32) }

  if (%file == $null) _error [error:no_sound_file]
  if (. !isin %file) %file = %file $+ .wav

  ; Determine filetype
  var %type = $_sext(%file)
  if (%type == $null) _error [error:no_sound_ext:ext=$gettok(%file,-1,46)]

  ; Find the file
  var %found = $_sfind(%type,0,%file)
  if (%found == $null) _error [error:no_sound_found:file=%file]

  ; sound / desc selected- now play
  return $_sound($gettok(%found,2,9),%found,%window,%action,%type,[public_sound:plays])
}

; determine filetype by extension
; $_sext(file)
alias -l _sext return $_scfg(reverse,$gettok($1-,-1,46))

; This does the actual playing of a sound (with display)
; $_sound(file,fileline,window,action,type,howplayed)
; 'window' can have a cid attached in format window,cid (one parameter)
; 'fileline' should contain the file/rating/desc
; 'action' should contain the action (- for default; blank ok)
; 'howplayed' should be some form of 'plays'
alias -l _sound {
  ; Correct window if needed
  var %window = $3,%action = $4,%s20 = % $+ 20
  if ($gettok(%window,1,44) == -a) %window = $active $+ , $+ $activecid
  if ((@Playlist* iswm $gettok(%window,1,44)) || (@Queue == $gettok(%window,1,44))) {
    %window = $hget(pnp,pqa.soundtarg)
    if (%window == $null) %window = -s $+ , $+ $activecid
  }
  elseif ((* * iswm %window) || (@* iswm %window)) %window = -s, $+ $activecid

  ; Play the sound itself
  _plsound $5 $1

  ; Format the action
  var %desc = $gettok($2,3,9)
  var %addleech

  if ($5 == mp3) {
    var %secs = $mp3.time($1)
    if ((%secs < 1) || (%secs == $null)) %secs = 0
    if ((%desc == $null) && ($_scfg($5,autodesc))) %desc = $mp3.desc($1)
  }

  if ($4 == -) {
    %action = $_readprep($readini($_cfg(sound.ini),$5,$iif(%desc == $null,msg,msgdesc)))
    if (!Random:* iswm %action) %action = $read($gettok(%action,2-,58),n)

    ; Add leech cmd?
    if (($mid($hget(pnp.config,sound.grab),6,1)) && ($mid($hget(pnp.config,sound.grab),1,1))) {
      if ((!$hget(pnp.config,sound.sendmatch)) || ($_searchtok($hget(pnp.config,sound.sendmatch),$1,44))) {
        if ($gettok($hget(pnp. $+ $cid,leechcmds),2,32)) %addleech = - [public_sound:leech:cmd=$ifmatch]
        elseif ($gettok($hget(pnp. $+ $cid,leechcmds),1,32)) %addleech = - [public_sound:leech:cmd=$ifmatch $nopath($1)]
      }
    }
  }

  if ($5 == mp3) {  
    %action = $msg.compile(%action,&desc&,%desc,&file&,$replace($nopath($1),%s20,_,_,$chr(32)),&secs&,%secs,&dur&,$_dur(%secs),&time&,$_stime(%secs),&size&,$_size($lof($1)),&play&,$6,&stereo&,$mp3.stereo($1),&bitrate&,$sound($1).bitrate,&khz&,$mp3.khz($1),&song&,$sound($1).title,&artist&,$sound($1).artist,&album&,$sound($1).album,&year&,$sound($1).year,&genre&,$sound($1).genre,&comment&,$sound($1).comment)
  }
  else {
    %action = $msg.compile(%action,&desc&,%desc,&file&,$replace($nopath($1),%s20,_,_,$chr(32)),&size&,$_size($lof($1)),&play&,$6)
  }

  ; Say it
  set -u %.file $nopath($1)
  if (($gettok(%window,2,44) isnum) && ($scid($gettok(%window,2,44)))) scid $gettok(%window,2,44)
  %window = $gettok(%window,1,44)
  if (%window == -c) {
    %action = %action %addleech
    if ($chan(0)) {
      if ($_scfg(opt,useme)) var %tosend = ACTION %action
      else var %tosend = SOUND $replace($nopath($1),$chr(32),?) %action
      var %chans
      %num = 1
      :loopa
      %sect = $chan(%num)
      if (%sect) {
        if ($me ison %sect) {
          %chans = $addtok(%chans,%sect,44)
          if (($numtok(%chans,44) >= $hget(pnp. $+ $cid,-target)) || ($calc($len(%chans) + $len(%tosend)) > 450)) { .ctcp %chans %tosend | var %chans }
          _show.sound %sect $me 0 0 %action
        }
        inc %num
        goto loopa
      }
      if (%chans) .ctcp %chans %tosend
      hadd pnp. $+ $cid lastsound $1
    }
    else _show.sound -s $me 0 0 %action
  }
  elseif (%window != -q) {
    if (%window != -s) {
      if ((%window ischan) && ($hget(pnp.config,sound.sendchan))) {
        if ($_searchtok($ifmatch,%window,44)) %action = %action %addleech
      }
      else %action = %action %addleech
      if ($_scfg(opt,useme)) .describe %window %action
      else .ctcp %window SOUND $replace($nopath($1),$chr(32),?) %action
      hadd pnp. $+ $cid lastsound $1
    }
    if ($_isopen(%window)) _show.sound %window $me 0 0 %action
    else _show.sound.send %window $me %action
  }
  scid -r

  _scontchk $5 $1
}

; Here we handle the action of playing a sound (no display)
; $1 should be the file type
; $2- should be the file
alias -l _plsound {
  ; Get the player
  var %sound = $2-,%player = $_scfg($1,player)

  ; Play
  if ($_scfg($1,shortfn)) %sound = $shortfn($2-)
  if ($left(%player,1) == /) %player " $+ %sound $+ "
  else {
    if ($exists(%sound) == $false) { if ($show) _error [error:no_sound_found:file=$2-] | return }
    if ($_scfg($1,listone)) {
      var %file = $_scfg($1,list)
      if (%file == $null) %file = lst

      ; Filename
      %file = $_temp(%file)
      write -c %file %sound
      %sound = $mircdir $+ %file
      %sound = $shortfn(%sound)
      if ($_scfg($1,listformat)) $ifmatch %sound
    }
    run $iif($_scfg($1,minimize),-n) %player $iif(%player,") $+ %sound $+ $iif(%player,")
    if ($_scfg($1,grabfocus)) hadd -u4 pnp grab.focus 1
  }

  ; Store recents- both in a 9-item list and a 30-item playlist, and panel if open
  _recent sound 9 0 $2-
  var %file = $_cfg(recent.pls)
  window -hl @.reclist
  if ($exists(%file)) loadbuf @.reclist %file
  if ($fline(@.reclist,$2-,1)) dline @.reclist $ifmatch
  iline @.reclist 1 $2-
  savebuf 1-30 @.reclist %file
  if ($dialog(sndpanel)) {
    var %found,%del = $line(@.reclist,31),%num = $did(sndpanel,7).lines
    :droop
    if (%num) {
      if ($did(sndpanel,7,%num) == $2-) { %found = 1 | did -c sndpanel 7 %num }
      elseif ($did(sndpanel,7,%num) == %del) did -d sndpanel 7 %num
      dec %num | goto droop
    }
    if (%found != 1) did -ac sndpanel 7 $2-
  }
  window -c @.reclist
}
; causes grabfocus to occur (or cancel) as soon as applicable
on *:APPACTIVE:{
  if ($appactive) hdel pnp grab.focus
  elseif ($hget(pnp,grab.focus)) showmirc -s
}

; $_sfind(type,x,filename)
; Finds sound file(s)
; wildcards finds indexed matches; wilds with directory finds nonindexed matches
; exact filename only matches exact file (although dirs are searched)
; x = 0 to return one (possibly random) match, 1 to return num of results and stick in @.soundfind
; remember that index is 'presorted'; results contain with tabs with descriptions etc.
; no errors except for index-missing errors
alias -l _sfind {
  window -hls @.soundfind
  clear @.soundfind
  ; wildcard search
  if ($nofile($3-)) {
    if ($exists($3-)) {
      if ($_scfg($1,index)) {
        var %file = $_cfg($1_indx.dat)
        if ($exists(%file) == $false) { 
          if ($show) {
            window -c @.soundfind
            _error [error:sound_reindex:type=$_desc($1):fkey=$_Q.fkey(1,$calc($ctime + 120),reindex,$1)]
          }
          if (!$2) window -c @.soundfind
          return
        }
        filter -fw %file @.soundfind *	 $+ $3- $+ 	*
      }
      if ($line(@.soundfind,0) == 0) aline @.soundfind 0 	 $+ $3- $+ $chr(9)
    }
    else {
      ; ...within a directory
      var %num = $findfile($nofile($3-),$nopath($3-),0,aline @.soundfind 0 	 $+ $1- $+ $chr(9))
    }
  }
  else {
    ; ...within index
    ; (if index isn't in use, default to manual scan)
    if ($_scfg($1,index)) {
      var %file = $_cfg($1_indx.dat)
      if ($exists(%file) == $false) {
        if ($show) {
          window -c @.soundfind
          _error [error:sound_reindex:type=$_desc($1):fkey=$_Q.fkey(1,$calc($ctime + 120),reindex,$1)]
        }
        if (!$2) window -c @.soundfind
        return
      }
      filter -fw %file @.soundfind *	*\ $+ $3- $+ 	*
    }
    else {
      ; find exact matches within sound dirs
      var %file,%num = 1
      :loopf
      %file = $_scfg($1,dir $+ %num)
      if (%file) {
        %file = $findfile(%file,$3-,0,aline @.soundfind 0 	 $+ $1- $+ $chr(9))
        inc %num | goto loopf
      }
    }
  }
  ; All matches are in window
  if ($2) return $line(@.soundfind,0)
  ; random...
  if ($line(@.soundfind,0) == 0) { window -c @.soundfind | return }
  if ($line(@.soundfind,0) == 1) var %num = $line(@.soundfind,1)
  else {
    :retry
    var %num = $line(@.soundfind,$_pprand($line(@.soundfind,0)))
    if ($_pprand($calc(2 + $gettok($gettok(%num,1,9),1,3))) > 2) goto retry
  }
  window -c @.soundfind
  return %num
}

; $_scfg(type,bit)
alias -l _scfg return $readini($_cfg(sound.ini),n,$1,$2)

; $_splext
alias -l _splext if ($_scfg(opt,playlist)) return $ifmatch | return m3u pls

; $_desc(type)
alias -l _desc return $readini($_cfg(sound.ini),n,$1,desc)

; $_stime(secs)
alias -l _stime if ($1) return $int($calc($1 / 60)) $+ : $+ $right($calc($1 % 60 + 100),2) | return ?:??

; MP3/etc info identifiers (time must return seconds or 0/null; all others are free-form)
alias -l mp3.time return $round($calc($sound($1-).length / 1000),0)
alias -l mp3.stereo var %mode = $sound($1-).mode | if (Stereo isin %mode) return Stereo | return %mode
alias -l mp3.khz return $calc($sound($1-).sample / 1000)
alias -l mp3.desc {
  var %album = $sound($1-).album
  if (%album) %album = ( $+ %album $+ )
  var %artist = $sound($1-).artist %album
  if (%artist) %artist = %artist -
  return %artist $sound($1-).title
}

alias -l _plwin if ($window(@Playlist*,$1) != $active) if ($ifmatch) return $ifmatch | return
alias -l _pldo {
  var %num = 1
  :loop
  if ($sline($1,%num).ln) {
    if ($2 == -r) dline $1 $sline($1,%num).ln
    elseif ($2 == -c) {
      aline $3 $sline($1,%num)
      inc %num
    }
    elseif ($2 == -m) {
      aline $3 $sline($1,%num)
      dline $1 $sline($1,%num).ln
    }
    goto loop
  }
  if (@Playlist* iswm $1) _plupdt $1
  if (@Playlist* iswm $3) _plupdt $3
}
alias -l _plupdt titlebar $1 ( $+ $calc($line($1,0) - 3) [word:files:lower]) $gettok($window($1).title,3-,32) | window -b $1
alias -l _plpl {
  if ($line($1,0) < 4) return
  var %num = 1,%file = $_temp($gettok($_splext,1,32))
  if ($2 == $null) savebuf $calc($line($1,0) - 3) $1 %file
  elseif ($2- == -) {
    write -c %file
    :loop
    if ($sline($1,%num)) {
      write %file $ifmatch
      inc %num | goto loop
    }
  }
  else write -c %file $2-
  _plplpl $mircdir $+ %file
}
alias -l _plplpl {
  var %file = $read($1-,n,1),%type = $_sext(%file)
  if (%type == $null) _error [error:no_sound_ext:ext=$gettok(%file,-1,46)]
  if (/* iswm $_scfg(%type,player)) _error [error:playlist_type:type=$_desc(%type)]
  .timer.squeue off
  if ($_scfg(%type,shortfn)) var %sound = $shortfn($1-)
  else var %sound = $1-
  var %player = $_scfg(%type,player)
  run $iif($_scfg(%type,minimize),-n) %player $iif(%player,") $+ %sound $+ $iif(%player,")
  if ($_scfg(%type,grabfocus)) hadd -u4 pnp grab.focus 1
}
alias -l _plpopdo {
  if ($window(@queue)) {
    if ($1 == 0) {
      var %num = 1
      :loopq1
      if ($sline($active,%num)) { squeue $ifmatch | inc %num | goto loopq1 }
      squeue start
    }
    elseif ($1 == 2) {
      var %num = 4
      :loopq2
      if ($line($active,%num)) { squeue $ifmatch | inc %num | goto loopq2 }
      squeue start
    }
    elseif ($1 == 1) { if ($line($active,0) > 3) { squeue $line($active,$calc($_pprand($calc($line($active,0) - 3)) + 3)) | squeue start } }
    elseif ($1 > 3) { squeue $line($active,$1) | squeue start }
  }
  else {
    if ($1 == 0) _plpl $active -
    elseif ($1 == 1) { if ($line($active,0) > 3) { _validst | sound $hget(pnp.config,soundtarg) " $+ $line($active,$calc($_pprand($calc($line($active,0) - 3)) + 3)) $+ " - } }
    elseif ($1 == 2) _plpl $active
    elseif ($1 > 3) { _validst | sound $hget(pnp.config,soundtarg) " $+ $line($active,$1) $+ " - }
  }
}
menu @Playlist {
  dclick:_plpopdo $1
  $_isstype
  $iif($window(@Queue),[popups_pls:queue],[popups_pls:playlist])
  .$iif($sline($active,1).ln > 3,[popups_pls:selected]):_plpopdo 0
  .[popups_pls:entire]:_plpopdo 2
  .[popups_pls:one_random]:_plpopdo 1
  .-
  .$iif($window(@Queue),[popups_pls:close_queue],[popups_pls:open_queue]):if ($window(@Queue)) squeue close | else squeue -n
  [popups_pls:options]
  .$iif($hget(pnp,sound.cont),$style(1)) [popups_pls:cont_play]:scont *
  .[popups_pls:play_to]... %.isstarg:starg
  .-
  .%.isstype1:_isstype 1
  .%.isstype2:_isstype 2
  .%.isstype3:_isstype 3
  .%.isstype4:_isstype 4
  .%.isstype5:_isstype 5
  .%.isstype6:stype
  -
  [popups_pls:edit]
  .[popups_pls:add]...:loc -a $+ $remove($active,@Playlist) *
  .[popups_pls:add_list]...:loc -sa $+ $remove($active,@Playlist) *
  .[popups_pls:find_file]...:loc -a $+ $remove($active,@Playlist) * " $+ $_entry(0,$null,Find filenames containing or matching...?Enter words or a wildcard string) $+ "
  .-
  .$iif($sline($active,1).ln > 3,[popups_pls:remove]):_pldo $active -r
  .-
  .$iif($sline($active,1).ln > 3,[popups_pls:copy])
  ..$_plwin(1):_pldo $active -c $window(@Playlist*,1)
  ..$_plwin(2):_pldo $active -c $window(@Playlist*,2)
  ..$_plwin(3):_pldo $active -c $window(@Playlist*,3)
  ..-
  ..[popups_pls:new_list]:var %old = $active,%win = $_newwin(@Playlist) | _window 2.4 -lz -t1,46 %win $_winpos(8,12,10,10) @Playlist | _plban %win | _pldo %old -c %win
  .$iif($sline($active,1).ln > 3,[popups_pls:move])
  ..$_plwin(1):_pldo $active -m $window(@Playlist*,1)
  ..$_plwin(2):_pldo $active -m $window(@Playlist*,2)
  ..$_plwin(3):_pldo $active -m $window(@Playlist*,3)
  ..-
  ..[popups_pls:new_list]:var %old = $active,%win = $_newwin(@Playlist) | _window 2.4 -lz -t1,46 %win $_winpos(8,12,10,10) @Playlist | _plban %win | _pldo %old -m %win
  .-
  .$iif($sline($active,1).ln > 3,[popups_pls:up]):_doslideup $active 4
  .$iif($sline($active,1).ln > 3,[popups_pls:down]):_doslidedn $active
  .$iif(($sline($active,0).ln > 1) && ($sline($active,1).ln > 3),[popups_pls:shuffle]):_doshuffle $active 4
  .$iif($sline($active,0).ln < 2,[popups_pls:shuffle_all]):_doshufflea $active 4
  -
  $iif(($numtok($window($active).title,32) > 2) && ($line($active,0) > 3),[popups_pls:save]):savebuf $calc($line($active,0) - 3) $active " $+ $gettok($window($active).title,3-,32) $+ "
  $iif($line($active,0) > 3,[popups_pls:save_as]...):{
    var %file = $_sext($line($active,4)),%dir = $_scfg(%file,lastpdir)
    if (%dir == $null) %dir = $_scfg(%file,dir1)
    %file = %dir $+ *. $+ $gettok($_splext,1,32)
    _ssplay Question
    %file = $sfile(%file,[sound:save_playlist],[word:save])
    if (%file == $null) return
    if (. !isin %file) %file = %file $+ . $+ $gettok($_splext,1,32)
    var %action
    if ($isfile(%file)) {
      %action = $_fileopt(1,%file)
      if (%action) %action =
      else %action = -a
    }
    savebuf %action $calc($line($active,0) - 3) $active " $+ %file $+ "
    titlebar $active $gettok($window($active).title,1-2,32) %file
  }
}
dialog starg {
  title "[starg_dialog:title]"
  icon script\pnp.ico
  option dbu
  size -1 -1 70 90
  text "&[starg_dialog:prompt]:", 1, 1 1 65 10
  combo 10, 0 12 70 75, drop
  list 30, 1 1 1 1, hide
  list 2, 0 25 70 55
  button "&[dialog:select]", 3, 10 78 48 10, default OK
  edit "", 4, 1 1 1 1, hide result autohs
}
on *:DIALOG:starg:init:*:{
  var %cid = $gettok($hget(pnp.config,soundtarg),2,44)
  if ($scid(%cid) == $null) %cid = $activecid
  var %scon = $scon(0)
  while (%scon) {
    did -a $+ $iif($cid == $scon(%scon),c) $dname 10 $hget(pnp. $+ $scon(%scon),net) ( $+ $scon(%scon).me $+ )
    did -a $dname 30 $scon(%scon)
    dec %scon
  }
  if (!$did(10).sel) did -c $dname 10 1
  did -f $dname 2
  _stargshowwins
}
on *:DIALOG:starg:sclick:10:{ _stargshowwins }
alias -l _stargshowwins {
  did -ra $dname 2 ([phrase:all_channels:lower])
  did -a $dname 2 ([phrase:active:lower])
  did -a $dname 2 ([phrase:status:lower])
  did -a $dname 2 ([sound:quietly])
  var %scid = $did(30,$did(10).sel)
  if ($scid(%scid)) scid %scid
  var %num = $chan(0) | :loop1 | if (%num) { if ($me ison $chan(%num)) _ddadd $dname 2 $chan(%num) | dec %num | goto loop1 }
  %num = $chat(0) | :loop2 | if (%num) { _ddadd $dname 2 = $+ $chat(%num) | dec %num | goto loop2 }
  %num = $query(0) | :loop3 | if (%num) { _ddadd $dname 2 $query(%num) | dec %num | goto loop3 }
  scid -r
  if ($findtok(-c -a -s -q,$gettok($hget(pnp.config,soundtarg),1,44),1,32)) did -c $dname 2 $ifmatch
  elseif ($_finddid($dname,2,$gettok($hget(pnp.config,soundtarg),1,44))) did -c $dname 2 $ifmatch
  did $iif($did(2).sel,-e,-b) $dname 3
}
on *:DIALOG:starg:sclick:2:did -e $dname 3
on *:DIALOG:starg:dclick:2:dialog -k $dname
on *:DIALOG:starg:sclick:3:{
  var %win = $did(2,$did(2).sel)
  if ($did(2).sel isnum 1-4) %win = - $+ $mid(casq,$did(2).sel,1)
  var %scid = $did(30,$did(10).sel)
  if (!$scid(%scid)) %scid = $scon(1)
  did -o $dname 4 1 %win $+ , $+ %scid
}
alias starg {
  if ($1- == Status Window) `set soundtarg -s $+ , $+ $cid
  elseif ((* * iswm $1-) || (@* iswm $1)) return
  elseif ($1) `set soundtarg $1 $+ , $+ $cid
  else {
    _ssplay Question
    `set soundtarg $$dialog(starg,starg,-4)
  }
  if (-q == $gettok($hget(pnp.config,soundtarg),1,44)) disps [sound:play_quiet]
  elseif (-? iswm $gettok($hget(pnp.config,soundtarg),1,44)) disps [sound:play_to]: $gettok([phrase:all_channels:lower]*[phrase:active:lower]*[phrase:status:lower],$findtok(-c -a -s,$gettok($hget(pnp.config,soundtarg),1,44),1,32),42)
  else dispr $gettok($hget(pnp.config,soundtarg),1,44) [sound:play_to]: $:t($gettok($hget(pnp.config,soundtarg),1,44))
}
; checks if soundtarg is still valid
; if $1 is null then we ask, otherwise we default to that
alias -l _validst {
  var %win = $gettok($hget(pnp.config,soundtarg),1,44)
  var %cid = $gettok($hget(pnp.config,soundtarg),2,44)
  if ((%win == -a) || (%win == -q)) return
  if (($scid(%cid) == $null) && (%cid isnum)) {
    if (%win == -s) `set soundtarg -s
    elseif ($1 == 0) `set soundtarg
    else starg $1
    return
  }
  if (-? iswm %win) return
  scid %cid
  if (%win ischan) return
  if ($query(%win) != $null) return
  if ((=* iswm %win) && ($chat($right(%win,-1)) != $null)) return
  if ($1 == 0) `set soundtarg
  else starg $1
}
; save active in case we use -a as a target for a playlist/queue
alias -l _validsta if (($active ischan) || ($query($active)) || (=* iswm $active)) hadd pnp pqa.soundtarg $active $+ , $+ $activecid | elseif (Status Window == $acitve) hadd pnp pqa.soundtarg -s, $+ $activecid

; Continuous
alias scont {
  if ($1 == *) hadd pnp sound.cont $_not($hget(pnp,sound.cont))
  elseif ($1) hadd pnp sound.cont $_o2tf($1)
  if ($hget(pnp,sound.cont)) {
    dispa [sound:cont_on]
    if ($dialog(sndpanel)) did -c sndpanel 10
  }
  else {
    dispa [sound:cont_off]
    if ($window(@Queue) == $null) .timer.squeue off
    if ($dialog(sndpanel)) did -u sndpanel 10
  }
}
alias -l _scontchk {
  if (($hget(pnp,sound.cont)) && ($window(@Queue) == $null)) {
    if ($_scfg($1,player) == /splay) .timer.squeue -io 0 3 if (($inmidi == $!false) && ($inwave == $!false) && ($insong == $!false)) _scontnext $1
    elseif ($1 == mp3) .timer.squeue -io 1 $mp3.time($2-) _scontnext $1
  }
  elseif ($window(@Queue) == $null) .timer.squeue off
}
alias -l _scontnext {
  if (($hget(pnp,sound.cont)) && ($window(@Queue) == $null)) {
    _validst -a
    if ($line(@Playlist,0) > 3) sound $hget(pnp.config,soundtarg) " $+ $line(@Playlist,$calc($_pprand($calc($line(@Playlist,0) - 3)) + 3)) $+ " -
    else loc -r $1 * $hget(pnp.config,soundtarg)
  }
}

on *:LOAD:{
  ; PnP check
  if (!$_ispnp) {
    echo 4 -ati2 *** This addon requires Peace and Protection by pai to use.
    echo 4 -ati2 *** You can download Peace and Protection at https://pnp.kristshell.net/
    .timer -mio 1 0 .unload -rs " $+ $script $+ "
    halt
  }
  ; Invalid load method check
  if (!$istok($_cfgx(addons,ids),$readini($script,n,addon,id),32)) {
    .timer -mio 1 0 .unload -rs " $+ $script $+ "
    dispa [startup:addon_file_improper:file=$script]
    halt
  }
  .sound on
}

alias f5 _validstp | loc -c * *
alias sf5 {
  if ($mouse.key & 2) {
    _validstp
    _validsta
    var %find = $_entry(0,$null,[sound:find_prompt])
    loc * "* $+ $replace(%find,$chr(32),*) $+ *"
  }
  else {
    _validstp
    loc *
  }
}
alias cf5 stype

alias -l _dsf if ($2 == $null) loc $1 | else if ((. isin $2-) || (: isin $2-) || (\ isin $2-)) loc $1 " $+ $2- $+ " | else loc $1 "* $+ $replace($2-,$chr(32),*) $+ *"
alias mp _dsf mp3 $1-
alias mp2 _dsf mp3 $1-
alias mp3 _dsf mp3 $1-
alias wav _dsf wav $1-
alias wave _dsf wav $1-
alias mid _dsf mid $1-
alias midi _dsf mid $1-
alias ogg _dsf ogg $1-
alias wma _dsf wma $1-

; sound type config
alias scfg _dialog -am stypes stypes
dialog stypes {
  title "[stype_dialog:title]"
  icon script\pnp.ico
  option dbu
  size -1 -1 125 89

  text "&[stype_dialog:prompt]", 1, 5 5 110 15

  list 2, 5 22 75 67, sort

  button "&[dialog:config]", 10, 85 23 35 12, default
  button "&[dialog:add]", 11, 85 39 35 12
  button "&[dialog:remove]", 12, 85 55 35 12
  button "[dialog:close]", 13, 85 71 35 12, cancel
}
on *:DIALOG:stypes:init:*:_freshenst $dname 2
alias -l _freshenst {
  did -r $1 $2
  if ($exists($_cfg(sound.ini)) == $false) return
  window -hl @.stypes
  filter -fw $_cfg(sound.ini) @.stypes [*]
  if ($fline(@.stypes,[reverse],1,0)) dline @.stypes $ifmatch
  if ($fline(@.stypes,[opt],1,0)) dline @.stypes $ifmatch
  var %type,%num = 1
  :loop
  if ($line(@.stypes,%num)) {
    %type = $right($left($ifmatch,-1),-1)
    did -a $+ $iif(%type == $3,c) $1 $2 $_desc(%type) ( $+ $_s2cs($_scfg(%type,ext)) $+ )
    inc %num | goto loop
  }
  window -c @.stypes
}
alias -l _selstype var %line = $did($1,$did($1).sel) | if ($chr(32) !isin %line) { if ($2) return | $$$ } | %line = $remove($gettok(%line,$numtok(%line,32),32),$chr(40),$chr(41),$chr(44)) | if ($_scfg(reverse,%line)) return $ifmatch | _error [error:sound_corrupt:type=%line]
on *:DIALOG:stypes:dclick:2:_stype s $_selstype(2) $dname
on *:DIALOG:stypes:sclick:10:_stype s $_selstype(2) $dname
on *:DIALOG:stypes:sclick:11:{
  if (($_scfg(mp3,ext)) && ($_scfg(wav,ext)) && ($_scfg(mid,ext)) && ($_scfg(wma,ext)) && ($_scfg(ogg,ext))) _stype a - $dname
  else {
    _ssplay Question
    _stype a $$dialog(deftypes,deftypes,-4) $dname
  }
}
on *:DIALOG:stypes:sclick:12:_stype r $_selstype(2) $dname
alias -l _stype {
  if ($1 == r) {
    _okcancel 0 [sound:delete_confirm:type=$2]
    var %ext = $_scfg($2,ext),%num = $numtok(%ext,32)
    :loop
    remini $_cfg(sound.ini) reverse $gettok(%ext,%num,32)
    if (%num > 1) { dec %num | goto loop }
    remini $_cfg(sound.ini) $2
    .remove $_cfg($2_indx.dat)
    did -d $3 2 $did($3,2).sel
  }
  else {
    if ($dialog(scfg)) { dialog -v scfg | return }
    %.s.type = $2
    %.s.fresh = $3
    dialog -am scfg scfg
  }
}

dialog deftypes {
  title "[stypeadd_dialog:title]"
  icon script\pnp.ico
  option dbu
  size -1 -1 158 49

  text "[stypeadd_dialog:prompt]:", 201, 7 6 140 10

  button "&[stypeadd_dialog:mp3]", 101, 6 20 32 12
  button "&[stypeadd_dialog:wav]", 102, 44 20 32 12
  button "&[stypeadd_dialog:mid]", 103, 82 20 32 12
  button "&[stypeadd_dialog:wma]", 104, 6 35 32 12
  button "&[stypeadd_dialog:ogg]", 105, 44 35 32 12
  button "&[word:other:dlg]", 106, 82 35 32 12, OK
  button "[dialog:cancel]", 107, 120 35 32 12, cancel

  edit "-", 1, 1 1 1 1, result hide
}
on *:DIALOG:deftypes:init:*:{
  if ($_scfg(mp3,ext)) did -b $dname 101
  if ($_scfg(wav,ext)) did -b $dname 102
  if ($_scfg(mid,ext)) did -b $dname 103
  if ($_scfg(wma,ext)) did -b $dname 104
  if ($_scfg(ogg,ext)) did -b $dname 105
}
on *:DIALOG:deftypes:sclick:*:if ($did isnum 101-105) { did -o $dname 1 1 $gettok(mp3 wav mid wma ogg,$calc($did - 100),32) | dialog -k $dname }

dialog scfg {
  title "[scfg_dialog:title]"
  icon script\pnp.ico
  option dbu
  size -1 -1 215 117

  check "&[word:options:dlg]", 203, 5 5 40 12, push
  check "&[scfg_dialog:dir]", 204, 50 5 40 12, push
  check "&[scfg_dialog:player]", 205, 95 5 40 12, push

  box "[word:options:dlg]:", 1, 5 22 205 72, hide
  text "&[scfg_dialog:type]:", 2, 5 32 42 8, right hide
  edit "", 3, 50 30 95 11, autohs hide result
  text "&[scfg_dialog:ext]:", 4, 5 44 42 8, right hide
  edit "", 5, 50 42 95 11, autohs hide
  text "&[scfg_dialog:action]:", 8, 5 56 42 8, right hide
  edit "", 9, 50 54 155 11, autohs hide
  text "&[scfg_dialog:wdesc]:", 10, 5 68 42 8, right hide
  edit "", 11, 50 66 155 11, autohs hide
  check "&[scfg_dialog:ask_desc]", 12, 20 80 85 10, hide disable
  check "&[scfg_dialog:use_id3]", 13, 110 80 100 10, hide

  box "[scfg_dialog:dir]:", 14, 5 22 205 70, hide
  list 15, 10 32 155 45, sort hide
  button "&[dialog:add]", 16, 169 33 35 12, hide
  button "&[dialog:remove]", 17, 169 53 35 12, hide
  check "&[scfg_dialog:index]", 18, 15 77 150 10, hide
  button "&[scfg_dialog:auto_find]...", 19, 169 73 35 12, hide disable

  box "[scfg_dialog:player]:", 20, 5 22 205 74, hide
  check "&[scfg_dialog:built_in]", 21, 10 31 190 10, hide
  button "", 22, 10 44 195 12, hide
  check "&[scfg_dialog:minimize]", 23, 10 59 77 10, hide
  check "&[scfg_dialog:grab_focus]", 24, 90 59 112 10, hide
  check "&[scfg_dialog:short_fn]", 25, 10 69 77 10, hide
  check "&[scfg_dialog:playlist_single]", 26, 90 69 112 10, hide
  check "&[scfg_dialog:play_sounds]", 29, 90 80 112 10, hide

  button "[dialog:ok]", 201, 25 100 40 12, OK default
  button "[dialog:cancel]", 202, 100 100 40 12, cancel

  edit "", 100, 1 1 1 1, hide autohs
  edit %.s.type, 101, 1 1 1 1, hide autohs
  edit %.s.fresh, 102, 1 1 1 1, hide autohs
  check "", 103, 1 1 1 1, hide
}
on *:DIALOG:scfg:init:*:{
  var %type = $did(101),%player,%num = 1
  if ($_scfg(%type,ext) == $null) {
    if ($istok(wav mid wma ogg mp3,%type,32)) %player = /splay
    if (%type == mp3) {
      var %extra = &time& (&bitrate&kbps &khz&kHz &stereo&)
      did -a $dname 15 $sound(mp3)
      did -c $dname 13,23
    }
    else {
      var %extra = &size&
      if (%type == wav) did -a $dname 15 $sound(wave)
      elseif (%type == mid) did -a $dname 15 $sound(midi)
      elseif (%type == wma) did -a $dname 15 $sound(wma)
      elseif (%type == ogg) did -a $dname 15 $sound(ogg)
      did -c $dname 29
    }
    did -a $dname 9 &play& ø &file& ø %extra ø
    did -a $dname 11 &play& ø &desc& ø %extra ø
    if ($findtok(wav mid mp3 wma ogg,%type,1,32)) {
      did -a $dname 3 $gettok(Wave MIDI MPEG WMA Ogg,$ifmatch,32)
      did -a $dname 5 $gettok(wav.mid.mp2 mp3.wma.ogg,$ifmatch,46)
    }
    did -c $dname 18
  }
  else {
    %player = $_scfg(%type,player)
    did -a $dname 3 $_scfg(%type,desc)
    did -a $dname 5 $_scfg(%type,ext)
    did -a $dname 9 $_readprep($_scfg(%type,msg))
    did -a $dname 11 $_readprep($_scfg(%type,msgdesc))
    if ($_scfg(%type,index)) did -c $dname 18
    if ($_scfg(%type,minimize)) did -c $dname 23
    if ($_scfg(%type,jukebox)) did -c $dname 29
  }
  if (!$istok(wav mid wma ogg mp3,%type,32)) did -b $dname 21
  if (%type != mp3) did -b $dname 13
  elseif ($_scfg(%type,autodesc)) did -c $dname 13
  did -a $dname 22 ([scfg_dialog:default_player])
  if (%player == /splay) { did -c $dname 21 | did -b $dname 22,23,24,25,26 }
  elseif (%player) did -a $dname 22 %player
  if ($_scfg(%type,grabfocus)) did -c $dname 24
  if ($_scfg(%type,shortfn)) did -c $dname 25
  if ($_scfg(%type,listone)) did -c $dname 26
  :loop
  if ($_scfg(%type,dir [ $+ [ %num ] ] )) {
    did -a $dname 15 $ifmatch
    inc %num | goto loop
  }
  if ($_dlgi(scfg) isnum 203-205) _scfgsec $ifmatch
  else _scfgsec 203
}
on *:DIALOG:scfg:sclick:21:did $iif($did(21).state,-b,-e) $dname 22,23,24,25,26
on *:DIALOG:scfg:sclick:22:if ($did(22) == ([scfg_dialog:default_player])) _scfgpls $did(22) | else did -a $dname 22 ([scfg_dialog:default_player])
alias -l _scfgpls { _ssplay Question | did -a scfg 22 $$sfile(c:\*.exe,[sound:select_player]) }
on *:DIALOG:scfg:dclick:15:_scfgad -co $$did(15,$did(15).sel)
on *:DIALOG:scfg:sclick:16:_scfgad -ca c:\
on *:DIALOG:scfg:sclick:17:if ($did(15).sel) { did -d $dname 15 $did(15).sel | did -c scfg 103 }
alias -l _scfgad {
  _ssplay Question
  did $1 scfg 15 $iif($1 == -co,$did(scfg,15).sel) $$sdir($2-,[sound:add_dir])
  did -c scfg 103
}
alias -l _scfgw if ($3 == $null) remini %.file $1 $2 | else writeini %.file $1 $2 $3-
on *:DIALOG:scfg:sclick:201:{
  set -u %.file $_cfg(sound.ini)
  if ($did(3) == $null) _error [error:sound_enter_type]
  var %old,%exts = $remove($replace($_c2s($did(5)),;,$chr(32)),.),%num = $numtok(%exts,32)
  if (%exts == $null) _error [error:sound_enter_ext]
  if ((* isin %exts) || (? isin %exts)) _error [error:sound_enter_wildcard]
  :loope
  %old = $_scfg(reverse,$gettok(%exts,%num,32))
  if ((%old != $null) && (%old != $did(101))) _error [error:sound_ext_used:ext=$gettok(%exts,%num,32):type=%old]
  if (%num > 1) { dec %num | goto loope }
  if ($did(101) == -) did -o $dname 101 1 $gettok(%exts,1,32)
  else {
    %old = $_scfg($did(101),ext)
    %num = $numtok(%old,32)
    :loopd
    if (%num) { remini %.file reverse $gettok(%old,%num,32) | dec %num | goto loopd }
  }
  %num = $numtok(%exts,32)
  :loopa
  _scfgw reverse $gettok(%exts,%num,32) $did(101)
  if (%num > 1) { dec %num | goto loopa }
  _scfgw $did(101) desc $did(3)
  _scfgw $did(101) ext %exts
  _scfgw $did(101) msg $_writeprep($did(9))
  _scfgw $did(101) msgdesc $_writeprep($did(11))
  _scfgw $did(101) autodesc $did(13).state
  if ($did(21).state) _scfgw $did(101) player /splay
  elseif ($did(22) == ([scfg_dialog:default_player])) _scfgw $did(101) player
  else _scfgw $did(101) player $did(22)
  _scfgw $did(101) minimize $did(23).state
  _scfgw $did(101) grabfocus $did(24).state
  _scfgw $did(101) shortfn $did(25).state
  _scfgw $did(101) listone $did(26).state
  _scfgw $did(101) jukebox $did(29).state
  %num = 1
  :loop
  if ($did(15,%num)) {
    _scfgw $did(101) dir $+ %num $ifmatch
    inc %num | goto loop
  }
  :loop2
  if ($_scfg($did(101),dir $+ %num)) {
    _scfgw $did(101) dir $+ %num
    inc %num | goto loop2
  }
  _freshenst $did(102) 2
  var %oldindex = $_scfg($did(101),index)
  _scfgw $did(101) index $did(18).state
  _dlgw scfg $did(100)
  ; $_not used so that 1 and 1 match, 0 and 0 match, AND 0 and null match
  if ($_not($did(18).state) != $_not(%oldindex)) _reqrei $did(101) $did(18).state
  elseif (($did(18).state) && ($did(103).state)) _reqrei $did(101) 2
}
alias -l _reqrei {
  if ($_okcancel(3,$gettok([sound:index_delete]*[sound:index_enable]*[sound:index_modify]*[sound:index_filelist],$calc($2 + 1),42))) {
    if ($2) reindex $1
    else .remove $_cfg($1_indx.dat)
  }
}
on *:DIALOG:scfg:sclick:*:if ($did > 202) _scfgsec $did
alias -l _scfgsec {
  var %sets
  %sets = 1,2,3,4,5,8,9,10,11,12,13 14,15,16,17,18,19 20,21,22,23,24,25,26,29
  ; select radio btn
  if ($did(scfg,100) isnum) {
    did -u scfg $did(scfg,100)
    did -h scfg $gettok(%sets,$calc($did(scfg,100) - 202),32)
  }
  did -o scfg 100 1 $1
  did -c scfg $1
  did -v scfg $gettok(%sets,$calc($1 - 202),32)
}

; /reindex type
; Reindexes sounds, retains ratings and descriptions
; indx_mp.dat (tabbed- filename, then rating as a color, then desc)
; alphabetical by filename
; also creates nick.txt in main dir if @nick is on
alias reindex {
  ; List all current files
  var %ext = $_scfg($1,ext)
  if (%ext == $null) _error [error:sound_type:type=$1]
  if (!$_scfg($1,index)) _error [error:sound_not_index:type=$_desc($1)]
  _resetleech
  writeini " $+ $scriptdir $+ reindex.ini" script n1 % $+ .fext = %ext $chr(124) % $+ .trig.type = $hget(pnp.config,sound.trigtype) $chr(124) % $+ .type = $1 $chr(124) % $+ .userdir = $mircdir $+ $_cfg $chr(124) % $+ .sdesc = $_desc($1) $chr(124) % $+ .textlist = $mircdir $+ $mknickfn($me) $+ - $+ $1 $+ .txt $chr(124) % $+ .leechcmd = $gettok($hget(pnp. $+ $cid,leechcmds),1,32)
  writeini " $+ $scriptdir $+ reindex.ini" rfiles n0 $scriptdir $+ reindex.ini
  writeini " $+ $scriptdir $+ reindex.ini" rfiles n1 $scriptdir $+ reindex.ini
  writeini " $+ $scriptdir $+ reindex.ini" rfiles n2 $scriptdir $+ reindex.ini
  if ($hget(pnp.config,sound.textfile)) .remove " $+ $hget(pnp.config,sound.textfile) $+ "
  if ($hget(pnp.config,sound.trigtype) == $1) `set sound.textfile $mknickfn($me) $+ - $+ $1 $+ .txt
  run $mircexe -i" $+ $scriptdir $+ reindex.ini"
  hadd -u4 pnp grab.focus 1
}

; Queueing
; /squeue [file.ext|n|next|prev|start|stop|close|-n]
alias squeue {
  if (($1- == close) || ($1- == close @Queue)) {
    .timer.squeue off
    window -c @Queue
    if ($dialog(sndpanel)) {
      did -u sndpanel 9
      did -ra sndpanel 10 &[spanel_dialog:cont]
    }
    return
  }
  if ($window(@Queue) == $null) {
    if (($1- == next) || ($1- == prev) || ($1- == stop)) return
    if ($1- isnum) _error [error:sound_queue]
    _validsta
    _window 2 $iif($1- == -n,-nlz,-lz) -t7,13 @Queue $_winpos(8,12,10,10) @Queue
    _windowreg @Queue squeue close
    if ($dialog(sndpanel)) {
      did -c sndpanel 9
      did -ra sndpanel 10 &[spanel_dialog:repeat_queue]
    }
  }
  if (($1- == $null) || ($1- == -n)) return
  if (($1- == next) || ($1- == prev)) {
    if ($fline(@Queue,([sound:queue_play])*,1,0)) {
      if (($ifmatch == $line(@Queue,0)) && ($1 == next) && ($hget(pnp,sound.cont))) _recurse squeue 1
      else _recurse squeue $calc($fline(@Queue,([sound:queue_play])*,1,0) + $iif($1 == next,1,-1))
    }
    elseif ($1 == next) _recurse squeue 1
    else .timer.squeue off
    return
  }
  if (($1- == stop) || ($1- isnum)) {
    .timer.squeue off
    var %oldext
    if ($fline(@Queue,([sound:queue_play])*,1,0)) {
      %oldext = $_sext($gettok($line(@Queue,$ifmatch),3,9))
      rline $color(not) @Queue $ifmatch $puttok($line(@Queue,$ifmatch),([sound:queue_done]),1,9)
    }
    if (($1 isnum) && ($numtok($line(@Queue,$1),9) > 2)) {
      if ((%oldext) && (%oldext != $_sext($gettok($line(@Queue,$1),3,9)))) loc %oldext stop
      rline $color(c) @Queue $1 $puttok($line(@Queue,$1),([sound:queue_play]),1,9)
      _validst -a
      sound $hget(pnp.config,soundtarg) " $+ $gettok($line(@Queue,$1),3,9) $+ " -
      var %time = $gettok($line(@Queue,$1),2,9)
      if (: isin %time) .timer.squeue -o 1 $calc($gettok(%time,2,58) + 60 * $gettok(%time,1,58) + 3) squeue next
      else .timer.squeue -o 0 3 if (($inmidi == $!false) && ($inwave == $!false) && ($insong == $!false)) squeue next
    }
    elseif (%oldext) loc %oldext stop
    return
  }
  if ($1- == start) {
    if ($fline(@Queue,([sound:queue_play])*,1,0)) return
    if ($fline(@Queue,([sound:queue_done])*,0,0) == $line(@Queue,0)) _recurse squeue 1
    else _recurse squeue $fline(@Queue, *,1,0)
    return
  }
  if ($exists($1-) == $false) _error [error:no_file:file=$1-]
  var %type = $_sext($1-)
  if (%type == $null) _error [error:no_sound_ext:ext=$gettok($1-,-1,46)]
  if (%type == mp3) { aline @Queue  	 $+ $_stime($mp3.time($1-)) $+ 	 $+ $1- }
  elseif (($istok(wav mid wma ogg,%type,32)) && ($_scfg(%type,player) == /splay)) aline @Queue  	 	 $+ $1-
  else _error [error:sound_queue_type:file=$1-]
  window -b @Queue
}

menu @Queue {
  dclick:if ($gettok($line($active,$1),1,9) == ([sound:queue_play])) squeue stop | else squeue $1
  $_isstype
  [popups_pls:play]...:loc *
  [popups_pls:random]...:loc -c * *
  [popups_pls:find]...:var %find = $_entry(0,$null,[sound:find_prompt]) | loc * "* $+ $replace(%find,$chr(32),*) $+ *"
  -
  [popups_pls:options]
  .$iif($hget(pnp,sound.cont),$style(1)) [popups_pls:cont_play]:scont *
  .[popups_pls:play_to]... %.isstarg:starg
  [popups_pls:type]
  .%.isstype1:_isstype 1
  .%.isstype2:_isstype 2
  .%.isstype3:_isstype 3
  .%.isstype4:_isstype 4
  .%.isstype5:_isstype 5
  .%.isstype6:stype
  .-
  .[popups_pls:reindex]:_validstp | reindex $hget(pnp.config,soundtype)
  -
  [popups_pls:prev]:squeue prev
  [popups_pls:next]:squeue next
  $iif($fline($active,([sound:queue_play])*,1,0),[popups_pls:stop],[popups_pls:resume]):if ($fline($active,([sound:queue_play])*,1,0)) squeue stop | else squeue start
  -
  [popups_pls:clean]:{ while ($fline($active,(done)*,1)) { dline $active $ifmatch } }
  [popups_pls:edit]
  .$iif($sline($active,1).ln,[popups_pls:remove]):_pldo $active -r
  .-
  .$iif($sline($active,1).ln,[popups_pls:up]):_doslideup $active 1
  .$iif($sline($active,1).ln,[popups_pls:down]):_doslidedn $active
  .$iif($sline($active,0).ln > 1,[popups_pls:shuffle]):_doshuffle $active 1
  .$iif($sline($active,0).ln < 2,[popups_pls:shuffle_all]):_doshufflea $active 1
  .-
  .[popups_pls:create_playlist]:{
    var %num = 1,%win = $_newwin(@Playlist),%old = $active
    _window 2.4 -lz -t1,46 %win $_winpos(8,12,10,10) @Playlist
    _plban %win
    :loop
    if ($line(%old,%num)) {
      aline %win $gettok($ifmatch,3,9)
      inc %num | goto loop
    }
    _plupdt %win
  }
}

dialog stype {
  title "[scfg_dialog:type]"
  option dbu
  size -1 -1 70 77
  text "&[stypesel_dialog:prompt]:", 1, 1 1 65 10
  list 2, 0 12 70 55, sort
  button "&[dialog:select]", 3, 10 65 48 10, default OK
  edit "", 4, 1 1 1 1, hide result autohs
}
on *:DIALOG:stype:init:*:_freshenst $dname 2
on *:DIALOG:stype:dclick:2:dialog -k $dname
on *:DIALOG:stype:sclick:3:did -o $dname 4 1 $_selstype(2)
alias stype {
  if ($1) {
    if ($_scfg(reverse,$1)) `set soundtype $ifmatch
    elseif ($_scfg($1,ext)) `set soundtype $1
    else _error [error:sound_type:type=$1]
  }
  else {
    _ssplay Question
    `set soundtype $$dialog(stype,stype,-4)
  }
  dispa [sound:play_type:type=$;t($_desc($hget(pnp.config,soundtype)))]
  if ($dialog(sndpanel)) did -ar sndpanel 1 & $+ $_desc($hget(pnp.config,soundtype)) $+ :
}
; checks if soundtype is still valid
alias -l _validstp if ($_scfg($hget(pnp.config,soundtype),ext) == $null) stype | elseif ($dialog(sndpanel)) did -ar sndpanel 1 & $+ $_desc($hget(pnp.config,soundtype)) $+ :

alias playlist {
  _validsta
  var %win = $_newwin(@Playlist)
  _window 2.4 -lz -t1,46 %win $_winpos(8,12,10,10) @Playlist
  titlebar %win (0 files)
  _plban %win
}


menu channel,menubar {
  $_popssep
  $_isstype
  [popups_menu:sound]
  .[popups_menu:s_play]...:loc *
  .[popups_menu:s_random]...:loc -c * *
  .[popups_menu:s_find]...:_validsta | var %find = $_entry(0,$null,[sound:find_prompt]) | loc * "* $+ $replace(%find,$chr(32),*) $+ *"
  .-
  .[popups_menu:s_type]
  ..%.isstype1:_isstype 1
  ..%.isstype2:_isstype 2
  ..%.isstype3:_isstype 3
  ..%.isstype4:_isstype 4
  ..%.isstype5:_isstype 5
  ..%.isstype6:stype
  ..-
  ..[popups_menu:s_reindex]:_validstp | reindex $hget(pnp.config,soundtype)
  .[popups_menu:s_recent]
  ..$_rec(sound,1):_tsound " $+ %=sound.1 $+ " -
  ..$_rec(sound,2):_tsound " $+ %=sound.2 $+ " -
  ..$_rec(sound,3):_tsound " $+ %=sound.3 $+ " -
  ..$_rec(sound,4):_tsound " $+ %=sound.4 $+ " -
  ..$_rec(sound,5):_tsound " $+ %=sound.5 $+ " -
  ..$_rec(sound,6):_tsound " $+ %=sound.6 $+ " -
  ..$_rec(sound,7):_tsound " $+ %=sound.7 $+ " -
  ..$_rec(sound,8):_tsound " $+ %=sound.8 $+ " -
  ..$_rec(sound,9):_tsound " $+ %=sound.9 $+ " -
  ..-
  ..%=sound.clr:_recclr sound | .remove $_cfg(recent.pls)
  ..$iif((%=sound.clr) && ($exists($_cfg(recent.pls))),[popups_menu:s_recentlist]...):_validsta | loc -sl * $_cfg(recent.pls)
  .-
  .[popups_menu:s_list]
  ..[popups_menu:s_create]:playlist
  ..[popups_menu:s_open]...:_validsta | loc -sl *
  ..[popups_menu:s_play]...:_validsta | loc -s *
  .[popups_menu:s_opt]
  ..$iif($hget(pnp,sound.cont),$style(1)) [popups_menu:s_cont]:scont *
  ..$iif($window(@Queue),$style(1)) [popups_menu:s_queue]:if ($window(@Queue)) squeue close | else squeue
  ..-
  ..[popups_menu:s_playto]... %.isstarg:starg
  .-
  .$iif($menu == menubar,[popups:config])
  ..[popups_menu:s_stypes]...:scfg
  ..[popups_menu:s_sopt]...:sopt
  ..-
  ;!!..F5:_error not done yet...
  ;!!..ShiftF5:_error not done yet...
  ;!!..CtrlF5:_error not done yet...
  $iif($mid($hget(pnp.config,sound.grab),1,2) == 12,[popups_menu:s_grab])
  .$_poprec(sgrab,1):msg $gettok($_sufnrec(sgrab,1),$iif($mid($hget(pnp.config,sound.grab),4,1),2,1),32) $_f2s($_grabrec(sgrab,1))
  .$_poprec(sgrab,2):msg $gettok($_sufnrec(sgrab,2),$iif($mid($hget(pnp.config,sound.grab),4,1),2,1),32) $_f2s($_grabrec(sgrab,2))
  .$_poprec(sgrab,3):msg $gettok($_sufnrec(sgrab,3),$iif($mid($hget(pnp.config,sound.grab),4,1),2,1),32) $_f2s($_grabrec(sgrab,3))
  .$_poprec(sgrab,4):msg $gettok($_sufnrec(sgrab,4),$iif($mid($hget(pnp.config,sound.grab),4,1),2,1),32) $_f2s($_grabrec(sgrab,4))
  .$_poprec(sgrab,5):msg $gettok($_sufnrec(sgrab,5),$iif($mid($hget(pnp.config,sound.grab),4,1),2,1),32) $_f2s($_grabrec(sgrab,5))
  .$_poprec(sgrab,6):msg $gettok($_sufnrec(sgrab,6),$iif($mid($hget(pnp.config,sound.grab),4,1),2,1),32) $_f2s($_grabrec(sgrab,6))
  .$_poprec(sgrab,7):msg $gettok($_sufnrec(sgrab,7),$iif($mid($hget(pnp.config,sound.grab),4,1),2,1),32) $_f2s($_grabrec(sgrab,7))
  .$_poprec(sgrab,8):msg $gettok($_sufnrec(sgrab,8),$iif($mid($hget(pnp.config,sound.grab),4,1),2,1),32) $_f2s($_grabrec(sgrab,8))
  .$_poprec(sgrab,9):msg $gettok($_sufnrec(sgrab,9),$iif($mid($hget(pnp.config,sound.grab),4,1),2,1),32) $_f2s($_grabrec(sgrab,9))
  .$_poprec(sgrab,10):msg $gettok($_sufnrec(sgrab,10),$iif($mid($hget(pnp.config,sound.grab),4,1),2,1),32) $_f2s($_grabrec(sgrab,10))
  .-
  .$iif($_grabrec(sgrab,0),[popups:clear_list]):hfree pnp.recseen. $+ $cid $+ .sgrab
}
alias -l _isstype {
  unset %.isstype?
  if ($exists($_cfg(sound.ini)) == $false) return
  window -hl @.stypes
  filter -fw $_cfg(sound.ini) @.stypes [*]
  if ($fline(@.stypes,[reverse],1,0)) dline @.stypes $ifmatch
  if ($fline(@.stypes,[opt],1,0)) dline @.stypes $ifmatch
  var %num = 1,%type
  :loop
  if ($line(@.stypes,%num)) {
    %type = $right($left($ifmatch,-1),-1)
    if (%num == $1) stype %type
    elseif ($1 == $null) set -u1 %.isstype [ $+ [ %num ] ] $iif($hget(pnp.config,soundtype) == %type,$style(1)) $_desc(%type)
    inc %num | goto loop
  }
  if ((%num > 6) && ($1 == $null)) set -u1 %.isstype6 More...
  window -c @.stypes
  _isstarg
}
alias -l _isstarg {
  _validst 0
  if (-* iswm $gettok($hget(pnp.config,soundtarg),1,44)) set -u1 %.isstarg ( $+ $gettok([phrase:status:lower]*[phrase:all_channels:lower]*[phrase:active:lower]*[sound:quietly],$findtok(-s -c -a -q,$gettok($hget(pnp.config,soundtarg),1,44),32),42) $+ )
  elseif ($gettok($hget(pnp.config,soundtarg),1,44)) set -u1 %.isstarg ( $+ $replace($ifmatch,&,&&) $+ )
  else unset %.isstarg
}

; sound playing/grabbing
ctcp &*:SOUND:_snd.ctcp $1-
ctcp &*:SLOTS:halt
ctcp &*:??? *:if (($right($2-,3) == $1) && (*.??? iswm $2-)) _snd.ctcp $1-
alias -l _snd.ctcp {
  if ($2 == $null) return
  if ($chan) { _snd.play $chan $_snd.extract($2-) | _show.sound $chan $nick $result 1 %.action }
  else {
    _snd.play $nick $_snd.extract($2-)
    if ($query($nick)) _show.sound $nick $nick $result 1 %.action
    else _show.sound -s $nick $result 1 %.action
  }
  halt
}
on &^*:CHAT:SOUND *:_snd.chat $1-
on &^*:CHAT:??? *:if ($right($remove($2-,),3) == $1) if (*.??? iswm $remove($2-,)) _snd.chat $1-
alias -l _snd.chat {
  _snd.play =$nick $_snd.extract($left($2-,-1))
  if (* iswm $1-) _show.sound =$nick $nick $result 1 %.action
  else _show.sound =$nick $nick $result 1 %.action
  halt
}
; sound display (window can be -s!)
; $1 = window $2 = nick $3 = 1 if you own sound (when played by other user) $4 = 1 to show filename if not part of msg $5- = action if any %.file = file
alias -l _show.sound {
  if ($5 == $null) {
    set -u %:echo echo $color(ctcp) $iif($1 == -s,-stmi2,-tmi2 $1)
    set -u %::text $replace(%.file,?,$chr(32))
    set -u %::nick $2
    if ($1 ischan) set -u %::chan $1
    theme.text Sound c
  }
  else {
    set -u %:echo echo $color(action) $iif($1 == -s,-stmi2,-tmi2 $1)
    set -u %::text $5-
    if (($4) && (* $+ $gettok($replace(%.file,$chr(32),?,_,?,-,?),1,46) $+ * !iswm $5-)) {
      set -u %:comments ( $+ $replace(%.file,?,$chr(32)) $+ )
      set -u %::text %::text $+ 
    }
    set -u %::nick $2
    if ($1 ischan) {
      set -u %::chan $1
      theme.text ActionChan c
    }
    else {
      theme.text ActionQuery
    }
  }
}
; for *sending* a sound to an unopen window
; $1 = target $2 = nick (you) $3- = action if any %.file = file
alias _show.sound.send {
  if ($3 == $null) {
    set -u %:echo echo $color(ctcp) -sti2
    set -u %::text $replace(%.file,?,$chr(32))
    set -u %::nick $1
    set -u %::target $1
    theme.text SoundMsgSelf
  }
  else {
    set -u %:echo echo $color(action) -sti2
    set -u %::text $3-
    set -u %::nick $1
    theme.text TextMsgSelf
  }

}
; puts filename in %.file and returns remaining action
alias -l _snd.extract {
  if ("* iswm $1) {
    set -u1 %.file $left($1-,$pos($1-,",2))
    set -u1 %.action $mid($1-,$calc($pos($1-,",2) + 1))
    if ("*" iswm %.file) %.file = $mid(%.file,2,-1)
    return %.action
  }
  var %tok,%num = 1,%last = $wildtok($1-,?*.?*,0,32)
  while (%num <= %last) {
    %tok = $wildtok($1-,?*.?*,%num,32)
    if ($len($gettok(%tok,$numtok(%tok,46),46)) isnum 2-3) {
      %num = $findtok($1-,%tok,1,32)
      %tok = 1- $+ %num
      var %rest = $calc(%num + 1) $+ -
      set -u1 %.file $gettok($1-,%tok,32)
      set -u1 %.action $gettok($1-,%rest,32)
      return %.action
    }
    inc %num
  }
  set -u1 %.file $1
  set -u1 %.action $2-
  return $2-
}
; play sound/etc; returns 1 if sound found
alias -l _snd.play {
  ; if /sound is off...
  if ($_optn(3,19) == 0) return
  if (* isin %.file) return 0
  var %type = $_sext(%.file)
  if (%type == $null) return 0
  var %file = $replace(%.file,-,?,_,?,$chr(32),?)
  if ($count(%file,?) > $calc($len(%file) / 3)) return 0
  ._sfind %type 0 %file
  var %found = $result
  if ($_scfg(%type,jukebox)) {
    if (%found) ._plsound %type $gettok(%found,2,9)
  }
  if ((%found == $null) && ($mid($hget(pnp.config,sound.grab),1,1))) {
    if (($target ischan) && ($hget(pnp.config,sound.grabchan))) {
      if ($_searchtok($ifmatch,$target,44) == 0) return
    }
    if ($hget(pnp.config,sound.grabmatch)) {
      if ($_searchtok($ifmatch,%file,44) == 0) return
    }
    if ($wildtok($strip($2-),!*,1,32)) var %trig = $ifmatch
    elseif ($mid($hget(pnp.config,sound.grab),3,1) == 0) goto done
    else var %trig = ! $+ $nick
    goto $mid($hget(pnp.config,sound.grab),2,1)
    :0
    msg $iif($mid($hget(pnp.config,sound.grab),4,1)),$nick,$1) %trig $replace(%.file,?,$chr(32))
    goto done
    :1
    var %win = $_mservwin(@SoundGrab)
    if ($window(%win) == $null) {
      _window 2.5 -lnv -t13,30 %win -1 -1 -1 -1 @SoundGrab
      titlebar %win ( $+ $hget(pnp. $+ $cid,net) $+ )
      aline %win [sound:grab_instruction]
      aline %win  
      aline %win ([word:channel:lower])	[word:nickname]	[word:file]
      aline %win  
    }
    if ($1 != $nick) var %pref = ( $+ $lower($1) $+ )
    else var %pref
    if (%trig != ! $+ $nick) %trig = ( $+ %trig $+ )
    else var %trig
    var %match = *	 $replace(%.file,?,$chr(32))
    if ($fline(%win,%match,1)) dline %win $ifmatch
    iline %win 5 %pref 	 $nick %trig 	 $replace(%.file,?,$chr(32))
    goto done
    :2
    _recseen 10 sgrab %trig $+ $chr(160) $+ $replace(%.file,?,$chr(160),$chr(32),$chr(160)) $1 $nick
  }
  :done
  if (%found) return 1
  return 0
}
menu @SoundGrab {
  dclick:if ($1 > 4) _sndgrab $1 $line($active,$1)
  [popups_menu:s_grab]:if ($sline($active,1).ln > 4) _sndgrab $ifmatch $sline($active,$1)
  [popups_menu:s_remove]::loop | if ($sline($active,1).ln > 4) { dline $active $ifmatch | goto loop }
  -
  [popups:config]...:sopt
}
alias -l _sndgrab {
  var %loc,%nick = $gettok($gettok($2-,2,9),1-,32)
  if ($chr(40) isin $2) %loc = $right($left($gettok($2-,1,9),-2),-1)
  if ((=* !iswm %loc) && ((%loc == $null) || ($mid($hget(pnp.config,sound.grab),4,1)))) %loc = $gettok(%nick,1,32)
  if ($gettok(%nick,2,32)) var %trig = $mid($ifmatch,2,$calc($len($ifmatch) - 2))
  else var %trig = ! $+ $gettok(%nick,1,32)
  msg %loc %trig $right($gettok($2-,3-,9),-1)
  cline $color(not) $active $1
}

;
; General config
;
alias sopt _dialog -am sopt sopt
dialog sopt {
  title "[sopt_dialog:title]"
  icon script\pnp.ico
  option dbu
  size -1 -1 215 140

  check "&[sopt_dialog:grab]", 203, 5 5 40 12, push
  check "&[sopt_dialog:leech]", 204, 50 5 40 12, push
  check "&[sopt_dialog:cmds]", 205, 95 5 40 12, push
  check "&[word:options:dlg]", 206, 140 5 40 12, push

  box "[sopt_dialog:grab]:", 1, 5 22 205 95, hide
  check "&[sopt_dialog:grab_enable]", 2, 10 31 195 8, hide
  radio "&[sopt_dialog:grab_auto]", 3, 20 43 185 8, hide
  radio "&[sopt_dialog:grab_win]", 4, 20 53 185 8, hide
  radio "&[sopt_dialog:grab_popup]", 5, 20 63 185 8, hide
  check "&[sopt_dialog:grab_matching]:", 6, 10 78 72 8, hide
  edit "", 7, 82 77 60 11, hide
  check "&[sopt_dialog:grab_chan]:", 8, 10 91 72 8, hide
  edit "", 9, 82 89 60 11, hide
  check "&[sopt_dialog:assume_trigger]", 10, 10 104 100 8, hide
  check "&[sopt_dialog:grab_private]", 11, 115 104 90 8, hide

  box "[sopt_dialog:leech]:", 12, 5 22 205 95, hide
  check "&[sopt_dialog:leech_enable]", 13, 10 31 195 8, hide
  text "&[sopt_dialog:leech_trigger]:", 14, 20 44 75 8, hide
  edit "", 15, 95 42 47 11, hide
  text "&[sopt_dialog:leech_last]:", 16, 20 56 75 8, hide
  edit "", 17, 95 54 47 11, hide
  check "&[sopt_dialog:leech_match]:", 18, 10 78 72 8, hide
  edit "", 19, 82 77 60 11, hide
  check "&[sopt_dialog:leech_chan]:", 20, 10 90 72 8, hide
  edit "", 21, 82 89 60 11, hide
  check "&[sopt_dialog:leech_show]", 44, 10 102 195 8, hide
  button "&[sopt_dialog:queue]...", 22, 147 47 55 12, hide

  box "[sopt_dialog:cmds]:", 23, 5 22 205 95, hide
  text "[sopt_dialog:cmds_help]", 24, 10 31 190 20, hide
  text "&[sopt_dialog:cmds_type]:", 25, 10 55 70 8, hide right
  combo 26, 83 54 59 50, hide drop
  text "&[sopt_dialog:cmds_find]:", 27, 10 68 70 8, hide right
  edit "", 28, 82 66 60 11, hide
  text "&[sopt_dialog:find_max]:", 37, 145 68 35 8, hide
  edit "", 38, 182 66 20 11, hide
  text "&[sopt_dialog:cmds_list]:", 29, 10 79 70 8, hide right
  edit "", 30, 82 77 60 11, hide
  text "&[sopt_dialog:cmds_cancel]:", 31, 10 90 70 8, hide right
  edit "", 32, 82 88 60 11, hide
  text "&[sopt_dialog:cmds_stats]:", 33, 10 101 70 8, hide right
  edit "", 34, 82 99 60 11, hide
  button "&[word:default:dlg]", 35, 147 83 55 12, hide
  button "&[dialog:clear]", 36, 147 98 55 12, hide

  box "[word:options:dlg]:", 39, 5 22 205 95, hide
  text "&[sopt_dialog:playlist_ext]:", 40, 10 78 70 8, hide right
  edit "", 41, 82 76 60 11, hide
  check "&[sopt_dialog:no_ctcp]", 42, 25 52 180 10, hide
  check "&[sopt_dialog:replies_quiet]", 43, 25 40 180 10, hide

  button "[dialog:ok]", 201, 25 122 40 12, OK default
  button "[dialog:cancel]", 202, 100 122 40 12, cancel

  edit "", 100, 1 1 1 1, hide autohs
}
on *:DIALOG:sopt:init:*:{
  if ($_dlgi(sopt) isnum 203-206) _soptsec $ifmatch
  else _soptsec 203
  if ($mid($hget(pnp.config,sound.grab),1,1)) did -c $dname 2
  else did -b $dname 3,4,5,6,7,8,9,10,11
  did -c $dname $calc(3 + $mid($hget(pnp.config,sound.grab),2,1))
  if ($hget(pnp.config,sound.grabmatch)) { did -c $dname 6 | did -o $dname 7 1 $ifmatch }
  if ($hget(pnp.config,sound.grabchan)) { did -c $dname 8 | did -o $dname 9 1 $ifmatch }
  ; (default to on)
  if (($mid($hget(pnp.config,sound.grab),3,1)) || ($hget(pnp.config,sound.grab) == $null)) did -c $dname 10
  if ($mid($hget(pnp.config,sound.grab),4,1)) did -c $dname 11
  if ($mid($hget(pnp.config,sound.grab),5,1)) did -c $dname 13
  else did -b $dname 14,15,16,17,18,19,20,21,22,44
  if ($mid($hget(pnp.config,sound.grab),6,1)) did -c $dname 44
  if ($hget(pnp.config,sound.sendmatch)) { did -c $dname 18 | did -o $dname 19 1 $ifmatch }
  if ($hget(pnp.config,sound.sendchan)) { did -c $dname 20 | did -o $dname 21 1 $ifmatch }
  ; (default !&me&)
  if ($hget(pnp.config,sound.trig) == $null) hadd pnp.config sound.trig !&me&
  var %num = 1
  :loop
  if ($gettok($hget(pnp.config,sound.trig),%num,32)) did -o $dname $gettok(15 17 28 30 32 34,%num,32) 1 $ifmatch
  if (%num < 6) { inc %num | goto loop }
  did -o $dname 38 1 $hget(pnp.config,sound.maxmatch)
  did -o $dname 41 1 $_splext
  if ($_scfg(opt,useme)) did -c $dname 42
  if (!$_scfg(opt,showreply)) did -c $dname 43
  _freshenst $dname 26 $hget(pnp.config,sound.trigtype)
  did -a $+ $iif($hget(pnp.config,sound.trigtype) == $null,c) $dname 26 ([sopt_dialog:type_disabled])
}
on *:DIALOG:sopt:sclick:201:{
  set -u %.file $_cfg(sound.ini)
  var %index,%trig,%num = 1,%exts = $remove($replace($_c2s($did(41)),;,$chr(32)),.),%newst = $_selstype(26,1)
  if ((* isin %exts) || (? isin %exts)) _error [error:sound_enter_wildcard]|([sound:playlist:lower])
  if ((%newst) && ($did(30))) {
    if (($hget(pnp.config,sound.trigtype) != %newst) || ($gettok($hget(pnp.config,sound.trig),4,32) == 0)) %index = 1
    elseif ($exists($hget(pnp.config,sound.textfile)) != $true) %index = 1
  }
  _dlgw sopt $did(100)
  `set sound.grab $did(2).state $+ $iif($did(3).state,0,$iif($did(4).state,1,2)) $+ $did(10).state $+ $did(11).state $+ $did(13).state $+ $did(44).state
  if (($did(6).state) && ($did(7))) `set sound.grabmatch $replace($ifmatch,$chr(32),;,;,$chr(44))
  else `set sound.grabmatch
  if (($did(8).state) && ($did(9))) `set sound.grabchan $replace($ifmatch,$chr(32),$chr(44))
  else `set sound.grabchan
  if (($did(18).state) && ($did(19))) `set sound.sendmatch $replace($ifmatch,$chr(32),;,;,$chr(44))
  else `set sound.sendmatch
  if (($did(20).state) && ($did(21))) `set sound.sendchan $replace($ifmatch,$chr(32),$chr(44))
  else `set sound.sendchan
  `set sound.maxmatch $iif($did(38) isnum,$did(38),15)
  :loop
  if ($did($gettok(15 17 28 30 32 34,%num,32))) %trig = %trig $gettok($ifmatch,1,32)
  else %trig = %trig 0
  if (%num < 6) { inc %num | goto loop }
  `set sound.trig %trig
  `set sound.trigtype %newst
  _scfgw opt playlist %exts
  _scfgw opt useme $did(42).state
  _scfgw opt showreply $_not($did(43).state)
  _resetleech
  if (%index) _reqrei $hget(pnp.config,sound.trigtype) 3
}
on *:DIALOG:sopt:sclick:2:did $iif($did(2).state,-e,-b) $dname 3,4,5,6,7,8,9,10,11
on *:DIALOG:sopt:sclick:13:did $iif($did(13).state,-e,-b) $dname 14,15,16,17,18,19,20,21,22,44
on *:DIALOG:sopt:sclick:22:dcc queue
on *:DIALOG:sopt:sclick:35:did -o $dname 28 1 @find | did -o $dname 30 1 @&me& | did -o $dname 32 1 @&me&-cancel | did -o $dname 34 1 @&me&-stats
on *:DIALOG:sopt:sclick:36:did -r $dname 28,30,32,34
on *:DIALOG:sopt:sclick:*:if ($did > 202) _soptsec $did
alias -l _soptsec {
  var %sets
  %sets = 1,2,3,4,5,6,7,8,9,10,11 12,13,14,15,16,17,18,19,20,21,22,44 23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38 39,40,41,42,43
  ; select radio btn
  if ($did(sopt,100) isnum) {
    did -u sopt $did(sopt,100)
    did -h sopt $gettok(%sets,$calc($did(sopt,100) - 202),32)
  }
  did -o sopt 100 1 $1
  did -c sopt $1
  did -v sopt $gettok(%sets,$calc($1 - 202),32)
}

;
; Sound Panel
;
dialog sndpanel {
  title "[spanel_dialog:title]"
  icon script\pnp.ico
  option dbu
  size -1 -1 165 11
  button "", 1, 1 1 33 9
  button "&[dialog:select]", 2, 41 1 25 9
  button "&[spanel_dialog:find]", 3, 68 1 25 9
  button "&[spanel_dialog:rand]", 4, 95 1 25 9
  button "&[spanel_dialog:play]", 13, 40 1 25 9, hide
  button "7[dialog:edit]", 14, 67 1 25 9, hide
  button "&[spanel_dialog:create]", 15, 95 1 25 9, hide
  check "&[sound:playlist:dlg]", 5, 122 1 25 9, push
  check "->", 6, 152 2 10 7, push
  combo 7, 1 11 147 100, drop sort
  button "&[spanel_dialog:repeat]", 8, 149 12 15 9
  check "&[spanel_dialog:queue]", 9, 1 23 44 9
  check "&[spanel_dialog:cont]", 10, 46 23 54 9
  button "&[spanel_dialog:play_to]...", 11, 100 23 47 9
  button "", 12, 1 1 1 1, hide cancel
}
alias f9 spanel
alias spanel if ($dialog(sndpanel)) dialog -c sndpanel | else dialog -mdo sndpanel sndpanel
on *:DIALOG:sndpanel:init:*:{
  if ($_dlgi(sndpanel)) {
    tokenize 32 $ifmatch
    if ($calc($1 + 330) > $window(-1).w) tokenize 32 $calc($window(-1).w - 330) $2-3
    if ($calc($2 + 45) > $window(-1).h) tokenize 32 $1 $calc($window(-1).h - 45) $3
    dialog -s $dname $1 $2 330 $iif($3,67,22)
    if ($3) did -c $dname 6
  }
  if ($exists($_cfg(recent.pls))) loadbuf -o $dname 7 $_cfg(recent.pls)
  if ($window(@Queue)) { did -c $dname 9 | did -ra $dname 10 &[spanel_dialog:repeat_queue:notdlg] }
  if ($hget(pnp,sound.cont)) did -c $dname 10
  _validstp
}
on *:DIALOG:sndpanel:sclick:1:stype
alias -l _panelpl if (@Playlist* iswm $active) return - $+ $1 $+ a $+ $remove($active,@Playlist) | else return - $+ $1
on *:DIALOG:sndpanel:sclick:2:loc $_panelpl *
on *:DIALOG:sndpanel:sclick:3:var %find = $_entry(0,$null,[sound:find_prompt]) | loc $_panelpl * "* $+ $replace(%find,$chr(32),*) $+ *"
on *:DIALOG:sndpanel:sclick:4:loc -c * *
on *:DIALOG:sndpanel:sclick:5:{
  if ($did(5).state) {
    did -h $dname 2,3,4
    did -v $dname 13,14,15
  }
  else {
    did -h $dname 13,14,15
    did -v $dname 2,3,4
  }
}
on *:DIALOG:sndpanel:sclick:6:dialog -s $dname -1 -1 330 $iif($did(6).state,67,22)
on *:DIALOG:sndpanel:sclick:8:{
  if ($did(7,$did(7).sel)) _tsound " $+ $ifmatch $+ " -
}
on *:DIALOG:sndpanel:sclick:9:{
  if ($window(@Queue)) squeue close
  else squeue -n
}
on *:DIALOG:sndpanel:sclick:10:.scont *
on *:DIALOG:sndpanel:sclick:11:starg
on *:DIALOG:sndpanel:sclick:12:_dlgw sndpanel $dialog($dname).x $dialog($dname).y $did(6).state
on *:DIALOG:sndpanel:sclick:13:loc -s *
on *:DIALOG:sndpanel:sclick:14:loc -sl *
on *:DIALOG:sndpanel:sclick:15:playlist
;;; not done- not sure on logic -when playlist is open- of buttons 4/13/14/15, or other features?

;
; Leeching
;
alias -l _resetleech hadd pnp. $+ $cid leechcmds $replace($hget(pnp.config,sound.trig),&me&,$me)
on me:*:NICK:_resetleech
on *:CONNECT:_resetleech
on *:TEXT:*:*:{
  if ($1 == 0) return
  var %cmd = $findtok($hget(pnp. $+ $cid,leechcmds),$1,1,32)
  if (%cmd == $null) return
  if (($target ischan) && ($hget(pnp.config,sound.sendchan))) {
    if ($_searchtok($ifmatch,$chan,44) == 0) return
  }
  if ((%cmd > 2) && ($hget(pnp.config,sound.trigtype) == $null)) return
  hinc -u10 pnp.flood. $+ $cid leechflood
  hinc -u10 pnp.flood. $+ $cid leechflood. $+ $site
  if (($hget(pnp.flood. $+ $cid,leechflood) > 5) || ($hget(pnp.flood. $+ $cid,leechflood. $+ $site) > 2)) return
  var %reply,%usecmd = $iif($_scfg(opt,showreply),_tnotice,_qnotice)
  goto %cmd

  :1
  ; !leech
  ; Send a matching file
  ; filename w/ext required
  if (.  !isin $2-) { %reply = [public_sound:need_ext] | goto reply }
  _snd.extract $2-
  tokenize 32 $1 %.file
  var %type = $_sext($2-)
  if (%type == $null) { %reply = [public_sound:unknown_ext] | goto reply }
  var %find = $replace($2-,$chr(32),?),%found = $gettok($_sfind(%type,0,%find),2,9)
  if (%found == $null) { %reply = [public_sound:not_found:file=$2-] | goto reply }
  if (($hget(pnp.config,sound.sendmatch)) && ($_searchtok($hget(pnp.config,sound.sendmatch),%found,44) == 0)) { %reply = [public_sound:not_avail:file=$2-] | goto reply }
  :filesend
  _send.dcc $nick %found
  if ($result > 0) {
    %reply = [public_sound:queued:file=$nopath(%found):num=$result]
    if ($gettok($hget(pnp. $+ $cid,leechcmds),6,32)) %reply = %reply $+ - [public_sound:status_cmd:cmd=$ifmatch]
    if ($gettok($hget(pnp. $+ $cid,leechcmds),5,32)) %reply = %reply $+ - [public_sound:cancel_cmd:cmd=$ifmatch]
  }
  elseif ($result == -4) %reply = [public_sound:error_send:file=$nopath(%found)]
  elseif ($result == -5) {
    %reply = [public_sound:already_queue:file=$nopath(%found)]
    if ($gettok($hget(pnp. $+ $cid,leechcmds),6,32)) %reply = %reply $+ - [public_sound:status_cmd:cmd=$ifmatch]
  }
  elseif ($result == -6) {
    %reply = [public_sound:already_send:file=$nopath(%found)]
    if ($gettok($hget(pnp. $+ $cid,leechcmds),6,32)) %reply = %reply $+ - [public_sound:status_cmd:cmd=$ifmatch]
  }
  elseif ($result < 0) {
    %reply = [public_sound:queue_full:file=$nopath(%found)]
    if ($gettok($hget(pnp. $+ $cid,leechcmds),6,32)) %reply = %reply $+ - [public_sound:status_cmd:cmd=$ifmatch]
  }
  goto reply

  :2
  ; !leech-last
  ; Send last played file
  if ($exists($hget(pnp. $+ $cid,lastsounds))) { %found = $hget(pnp. $+ $cid,lastsound) | goto filesend }
  return

  :3
  ; @find
  ; User can search for matching files
  ; only one search at a time from a site
  if ($hget(pnp. $+ $cid,-search. $+ $site)) return
  if ($len($remove($2-,*,?)) < 3) { %reply = [public_sound:search_min] | goto reply }
  var %match = * $+ $replace($2-,$chr(32),*)) $+ *
  :fixstar | if (** isin %match) { %match = $replace(%match,**,*) | goto fixstar }
  var %found = $_sfind($hget(pnp.config,sound.trigtype),1,%match)
  if (%found == 0) {
    window -c @.soundfind
    if ($target == $nick) { %reply = [public_sound:no_match:text=%match] | goto reply }
    return
  }
  if (%found > $hget(pnp.config,sound.maxmatch)) {
    window -c @.soundfind
    %reply = [public_sound:found_too_many:num=%found:text=%match]
    if ($gettok($hget(pnp. $+ $cid,leechcmds),4,32)) %reply = %reply $+ - [public_sound:list_cmd:cmd=$ifmatch]
    goto reply
  }
  %usecmd = _unkludge  $+ %usecmd $+  $+ $nick
  .timer 1 2 %usecmd [public_sound:found:num=%found:text=%match]
  var %delay = 3,%file = 1
  :fileloop
  .timer 1 %delay %usecmd $nopath($gettok($line(@.soundfind,%file),2,9))
  if (%file < %found) {
    inc %delay 3
    inc %file
    goto fileloop
  }
  hadd -u $+ $calc(%delay + 1) pnp. $+ $cid -search. $+ $site 1
  window -c @.soundfind
  return

  :4
  ; @nick
  ; Sends user your filelist (chr(34) used to avoid virus warning from norton)
  if ($exists($hget(pnp.config,sound.textfile))) dcc send $nick $chr(34) $+ $hget(pnp.config,sound.textfile) $+ $chr(34)
  return

  :5
  ; @nick-cancel
  ; Cancels any sends to user
  var %cancel = $_cancel.dcc($nick)
  if (%cancel) %reply = [public_sound:cancel_count:num=%cancel]
  else %reply = [public_sound:cancel_none]
  goto reply

  :6
  ; @nick-stats
  ; Tells user how many files they're receiving and have queued, and the position of their highest file
  ; Also tells user how many total files are being sent and are queued
  var %num = $send(0),%send = 0,%sendnick = 0
  :statc
  if (%num) {
    if ($send(%num).status != inactive) {
      if ($send(%num) == $nick) inc %sendnick
      inc %send
    }
    dec %num | goto statc
  }
  var %countnick = $_count.dcc($nick),%count = $_count.dcc
  if ($calc(%sendnick + %send + %countnick + %count) == 0) _linedance %usecmd $nick [public_sound:queue_empty]
  else _linedance %usecmd $nick [public_sound:queue_status:send=%sendnick:sendtotal=%send:queue=%countnick:queuetotal=%count]
  if (%count) {
    var %pos = $_pos.dcc($nick),%posth = %pos $+ oo
    var %reply = [public_sound:queue_next:file=$gettok($line(@DCCQueue,%pos),2-,9):num=$asctime(%posth)]
    if ($gettok($hget(pnp. $+ $cid,leechcmds),5,32)) %reply = %reply $+ - [public_sound:cancel_cmd:cmd=$ifmatch]
    _linedance %usecmd $nick %reply
  }
  return

  : reply
  if (%reply) _linedance %usecmd $nick %reply
}
